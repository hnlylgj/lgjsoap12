/* soapH.h
   Generated by gSOAP 2.8.34 for adas.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_xsd__byte_DEFINED
#define SOAP_TYPE_xsd__byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__byte(struct soap*, char *);

#define soap_xsd__byte2s soap_byte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);

#define soap_s2xsd__byte soap_s2byte

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_xsd__byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__byte(soap, p, "xsd:byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

inline int soap_read_xsd__byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_short_DEFINED
#define SOAP_TYPE_short_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration_DEFINED
#define SOAP_TYPE_xsd__duration_DEFINED
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, LONG64 *);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, LONG64);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, LONG64 *);
SOAP_FMAC1 LONG64 * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, LONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_xsd__duration(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__duration(soap, p, "xsd:duration", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_xsd__duration(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__duration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_DEFINED
#define SOAP_TYPE_xsd__unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__unsignedByte(struct soap*, unsigned char *);

#define soap_xsd__unsignedByte2s soap_unsignedByte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);

#define soap_s2xsd__unsignedByte soap_s2unsignedByte

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_xsd__unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedShort_DEFINED
#define SOAP_TYPE_unsignedShort_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap*, unsigned short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

inline int soap_write_unsignedShort(struct soap *soap, unsigned short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

inline int soap_read_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ULONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_dateTime(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

inline bool * soap_new_bool(struct soap *soap, int n = -1)
{
	return static_cast<bool *>(soap_malloc(soap, (n < 0 ? 1 : n) * sizeof(bool)));
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_arr__ArrayOfstring_DEFINED
#define SOAP_TYPE_arr__ArrayOfstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfstring(struct soap*, const char*, int, const arr__ArrayOfstring *, const char*);
SOAP_FMAC3 arr__ArrayOfstring * SOAP_FMAC4 soap_in_arr__ArrayOfstring(struct soap*, const char*, arr__ArrayOfstring *, const char*);
SOAP_FMAC1 arr__ArrayOfstring * SOAP_FMAC2 soap_instantiate_arr__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline arr__ArrayOfstring * soap_new_arr__ArrayOfstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_arr__ArrayOfstring(soap, n, NULL, NULL, NULL);
}

inline arr__ArrayOfstring * soap_new_req_arr__ArrayOfstring(
	struct soap *soap,
	int __sizestring,
	std::wstring *string)
{
	arr__ArrayOfstring *_p = soap_new_arr__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->arr__ArrayOfstring::__sizestring = __sizestring;
		_p->arr__ArrayOfstring::string = string;
	}
	return _p;
}

inline arr__ArrayOfstring * soap_new_set_arr__ArrayOfstring(
	struct soap *soap,
	int __sizestring,
	std::wstring *string,
	char *__item__1)
{
	arr__ArrayOfstring *_p = soap_new_arr__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->arr__ArrayOfstring::__sizestring = __sizestring;
		_p->arr__ArrayOfstring::string = string;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 arr__ArrayOfstring * SOAP_FMAC4 soap_get_arr__ArrayOfstring(struct soap*, arr__ArrayOfstring *, const char*, const char*);

inline int soap_read_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_arr__ArrayOfstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__PrimeAccount_DEFINED
#define SOAP_TYPE_ns2__PrimeAccount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__PrimeAccount(struct soap*, const char*, int, const ns2__PrimeAccount *, const char*);
SOAP_FMAC3 ns2__PrimeAccount * SOAP_FMAC4 soap_in_ns2__PrimeAccount(struct soap*, const char*, ns2__PrimeAccount *, const char*);
SOAP_FMAC1 ns2__PrimeAccount * SOAP_FMAC2 soap_instantiate_ns2__PrimeAccount(struct soap*, int, const char*, const char*, size_t*);

inline ns2__PrimeAccount * soap_new_ns2__PrimeAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__PrimeAccount(soap, n, NULL, NULL, NULL);
}

inline ns2__PrimeAccount * soap_new_req_ns2__PrimeAccount(
	struct soap *soap)
{
	ns2__PrimeAccount *_p = soap_new_ns2__PrimeAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__PrimeAccount * soap_new_set_ns2__PrimeAccount(
	struct soap *soap,
	wchar_t *AccountID,
	int *ActivityLess,
	wchar_t *Address,
	time_t *BirthDate,
	wchar_t *EMail,
	xsd__base64Binary *HeadImage,
	wchar_t *Job,
	time_t *LastDate,
	wchar_t *LoginName,
	wchar_t *MobileID,
	wchar_t *NickName,
	wchar_t *OwnerName,
	wchar_t *PassWord,
	wchar_t *PersonID,
	time_t *RegDate,
	int *SexID,
	wchar_t *Signature,
	wchar_t *TeleCode,
	char *__item__1)
{
	ns2__PrimeAccount *_p = soap_new_ns2__PrimeAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__PrimeAccount::AccountID = AccountID;
		_p->ns2__PrimeAccount::ActivityLess = ActivityLess;
		_p->ns2__PrimeAccount::Address = Address;
		_p->ns2__PrimeAccount::BirthDate = BirthDate;
		_p->ns2__PrimeAccount::EMail = EMail;
		_p->ns2__PrimeAccount::HeadImage = HeadImage;
		_p->ns2__PrimeAccount::Job = Job;
		_p->ns2__PrimeAccount::LastDate = LastDate;
		_p->ns2__PrimeAccount::LoginName = LoginName;
		_p->ns2__PrimeAccount::MobileID = MobileID;
		_p->ns2__PrimeAccount::NickName = NickName;
		_p->ns2__PrimeAccount::OwnerName = OwnerName;
		_p->ns2__PrimeAccount::PassWord = PassWord;
		_p->ns2__PrimeAccount::PersonID = PersonID;
		_p->ns2__PrimeAccount::RegDate = RegDate;
		_p->ns2__PrimeAccount::SexID = SexID;
		_p->ns2__PrimeAccount::Signature = Signature;
		_p->ns2__PrimeAccount::TeleCode = TeleCode;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__PrimeAccount(struct soap *soap, ns2__PrimeAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:PrimeAccount", p->soap_type() == SOAP_TYPE_ns2__PrimeAccount ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns2__PrimeAccount * SOAP_FMAC4 soap_get_ns2__PrimeAccount(struct soap*, ns2__PrimeAccount *, const char*, const char*);

inline int soap_read_ns2__PrimeAccount(struct soap *soap, ns2__PrimeAccount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__PrimeAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ArrayOfPrimeAccount_DEFINED
#define SOAP_TYPE_ns2__ArrayOfPrimeAccount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ArrayOfPrimeAccount(struct soap*, const char*, int, const ns2__ArrayOfPrimeAccount *, const char*);
SOAP_FMAC3 ns2__ArrayOfPrimeAccount * SOAP_FMAC4 soap_in_ns2__ArrayOfPrimeAccount(struct soap*, const char*, ns2__ArrayOfPrimeAccount *, const char*);
SOAP_FMAC1 ns2__ArrayOfPrimeAccount * SOAP_FMAC2 soap_instantiate_ns2__ArrayOfPrimeAccount(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ArrayOfPrimeAccount * soap_new_ns2__ArrayOfPrimeAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ArrayOfPrimeAccount(soap, n, NULL, NULL, NULL);
}

inline ns2__ArrayOfPrimeAccount * soap_new_req_ns2__ArrayOfPrimeAccount(
	struct soap *soap,
	int __sizePrimeAccount,
	ns2__PrimeAccount **PrimeAccount)
{
	ns2__ArrayOfPrimeAccount *_p = soap_new_ns2__ArrayOfPrimeAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfPrimeAccount::__sizePrimeAccount = __sizePrimeAccount;
		_p->ns2__ArrayOfPrimeAccount::PrimeAccount = PrimeAccount;
	}
	return _p;
}

inline ns2__ArrayOfPrimeAccount * soap_new_set_ns2__ArrayOfPrimeAccount(
	struct soap *soap,
	int __sizePrimeAccount,
	ns2__PrimeAccount **PrimeAccount,
	char *__item__1)
{
	ns2__ArrayOfPrimeAccount *_p = soap_new_ns2__ArrayOfPrimeAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ArrayOfPrimeAccount::__sizePrimeAccount = __sizePrimeAccount;
		_p->ns2__ArrayOfPrimeAccount::PrimeAccount = PrimeAccount;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__ArrayOfPrimeAccount(struct soap *soap, ns2__ArrayOfPrimeAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ArrayOfPrimeAccount", p->soap_type() == SOAP_TYPE_ns2__ArrayOfPrimeAccount ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ArrayOfPrimeAccount * SOAP_FMAC4 soap_get_ns2__ArrayOfPrimeAccount(struct soap*, ns2__ArrayOfPrimeAccount *, const char*, const char*);

inline int soap_read_ns2__ArrayOfPrimeAccount(struct soap *soap, ns2__ArrayOfPrimeAccount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ArrayOfPrimeAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCarRunStateResponse_DEFINED
#define SOAP_TYPE__ns1__GetCarRunStateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCarRunStateResponse(struct soap*, const char*, int, const _ns1__GetCarRunStateResponse *, const char*);
SOAP_FMAC3 _ns1__GetCarRunStateResponse * SOAP_FMAC4 soap_in__ns1__GetCarRunStateResponse(struct soap*, const char*, _ns1__GetCarRunStateResponse *, const char*);
SOAP_FMAC1 _ns1__GetCarRunStateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCarRunStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCarRunStateResponse * soap_new__ns1__GetCarRunStateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCarRunStateResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCarRunStateResponse * soap_new_req__ns1__GetCarRunStateResponse(
	struct soap *soap)
{
	_ns1__GetCarRunStateResponse *_p = soap_new__ns1__GetCarRunStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCarRunStateResponse * soap_new_set__ns1__GetCarRunStateResponse(
	struct soap *soap,
	int *GetCarRunStateResult,
	wchar_t *CarRunStateList)
{
	_ns1__GetCarRunStateResponse *_p = soap_new__ns1__GetCarRunStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCarRunStateResponse::GetCarRunStateResult = GetCarRunStateResult;
		_p->_ns1__GetCarRunStateResponse::CarRunStateList = CarRunStateList;
	}
	return _p;
}

inline int soap_write__ns1__GetCarRunStateResponse(struct soap *soap, _ns1__GetCarRunStateResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCarRunStateResponse", p->soap_type() == SOAP_TYPE__ns1__GetCarRunStateResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCarRunStateResponse * SOAP_FMAC4 soap_get__ns1__GetCarRunStateResponse(struct soap*, _ns1__GetCarRunStateResponse *, const char*, const char*);

inline int soap_read__ns1__GetCarRunStateResponse(struct soap *soap, _ns1__GetCarRunStateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCarRunStateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCarRunState_DEFINED
#define SOAP_TYPE__ns1__GetCarRunState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCarRunState(struct soap*, const char*, int, const _ns1__GetCarRunState *, const char*);
SOAP_FMAC3 _ns1__GetCarRunState * SOAP_FMAC4 soap_in__ns1__GetCarRunState(struct soap*, const char*, _ns1__GetCarRunState *, const char*);
SOAP_FMAC1 _ns1__GetCarRunState * SOAP_FMAC2 soap_instantiate__ns1__GetCarRunState(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCarRunState * soap_new__ns1__GetCarRunState(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCarRunState(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCarRunState * soap_new_req__ns1__GetCarRunState(
	struct soap *soap)
{
	_ns1__GetCarRunState *_p = soap_new__ns1__GetCarRunState(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCarRunState * soap_new_set__ns1__GetCarRunState(
	struct soap *soap,
	wchar_t *OptCode,
	int *FlagCode,
	wchar_t *CarRunStateList)
{
	_ns1__GetCarRunState *_p = soap_new__ns1__GetCarRunState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCarRunState::OptCode = OptCode;
		_p->_ns1__GetCarRunState::FlagCode = FlagCode;
		_p->_ns1__GetCarRunState::CarRunStateList = CarRunStateList;
	}
	return _p;
}

inline int soap_write__ns1__GetCarRunState(struct soap *soap, _ns1__GetCarRunState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCarRunState", p->soap_type() == SOAP_TYPE__ns1__GetCarRunState ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCarRunState * SOAP_FMAC4 soap_get__ns1__GetCarRunState(struct soap*, _ns1__GetCarRunState *, const char*, const char*);

inline int soap_read__ns1__GetCarRunState(struct soap *soap, _ns1__GetCarRunState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetCarRunState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PostListCarRunStateResponse_DEFINED
#define SOAP_TYPE__ns1__PostListCarRunStateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PostListCarRunStateResponse(struct soap*, const char*, int, const _ns1__PostListCarRunStateResponse *, const char*);
SOAP_FMAC3 _ns1__PostListCarRunStateResponse * SOAP_FMAC4 soap_in__ns1__PostListCarRunStateResponse(struct soap*, const char*, _ns1__PostListCarRunStateResponse *, const char*);
SOAP_FMAC1 _ns1__PostListCarRunStateResponse * SOAP_FMAC2 soap_instantiate__ns1__PostListCarRunStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PostListCarRunStateResponse * soap_new__ns1__PostListCarRunStateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__PostListCarRunStateResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__PostListCarRunStateResponse * soap_new_req__ns1__PostListCarRunStateResponse(
	struct soap *soap)
{
	_ns1__PostListCarRunStateResponse *_p = soap_new__ns1__PostListCarRunStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PostListCarRunStateResponse * soap_new_set__ns1__PostListCarRunStateResponse(
	struct soap *soap,
	int *PostListCarRunStateResult,
	int *FlagCode)
{
	_ns1__PostListCarRunStateResponse *_p = soap_new__ns1__PostListCarRunStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PostListCarRunStateResponse::PostListCarRunStateResult = PostListCarRunStateResult;
		_p->_ns1__PostListCarRunStateResponse::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__PostListCarRunStateResponse(struct soap *soap, _ns1__PostListCarRunStateResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PostListCarRunStateResponse", p->soap_type() == SOAP_TYPE__ns1__PostListCarRunStateResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PostListCarRunStateResponse * SOAP_FMAC4 soap_get__ns1__PostListCarRunStateResponse(struct soap*, _ns1__PostListCarRunStateResponse *, const char*, const char*);

inline int soap_read__ns1__PostListCarRunStateResponse(struct soap *soap, _ns1__PostListCarRunStateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PostListCarRunStateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PostListCarRunState_DEFINED
#define SOAP_TYPE__ns1__PostListCarRunState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PostListCarRunState(struct soap*, const char*, int, const _ns1__PostListCarRunState *, const char*);
SOAP_FMAC3 _ns1__PostListCarRunState * SOAP_FMAC4 soap_in__ns1__PostListCarRunState(struct soap*, const char*, _ns1__PostListCarRunState *, const char*);
SOAP_FMAC1 _ns1__PostListCarRunState * SOAP_FMAC2 soap_instantiate__ns1__PostListCarRunState(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PostListCarRunState * soap_new__ns1__PostListCarRunState(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__PostListCarRunState(soap, n, NULL, NULL, NULL);
}

inline _ns1__PostListCarRunState * soap_new_req__ns1__PostListCarRunState(
	struct soap *soap)
{
	_ns1__PostListCarRunState *_p = soap_new__ns1__PostListCarRunState(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PostListCarRunState * soap_new_set__ns1__PostListCarRunState(
	struct soap *soap,
	wchar_t *CarRunStateSet,
	int *FlagCode)
{
	_ns1__PostListCarRunState *_p = soap_new__ns1__PostListCarRunState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PostListCarRunState::CarRunStateSet = CarRunStateSet;
		_p->_ns1__PostListCarRunState::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__PostListCarRunState(struct soap *soap, _ns1__PostListCarRunState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PostListCarRunState", p->soap_type() == SOAP_TYPE__ns1__PostListCarRunState ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PostListCarRunState * SOAP_FMAC4 soap_get__ns1__PostListCarRunState(struct soap*, _ns1__PostListCarRunState *, const char*, const char*);

inline int soap_read__ns1__PostListCarRunState(struct soap *soap, _ns1__PostListCarRunState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PostListCarRunState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SendCarRunStateResponse_DEFINED
#define SOAP_TYPE__ns1__SendCarRunStateResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendCarRunStateResponse(struct soap*, const char*, int, const _ns1__SendCarRunStateResponse *, const char*);
SOAP_FMAC3 _ns1__SendCarRunStateResponse * SOAP_FMAC4 soap_in__ns1__SendCarRunStateResponse(struct soap*, const char*, _ns1__SendCarRunStateResponse *, const char*);
SOAP_FMAC1 _ns1__SendCarRunStateResponse * SOAP_FMAC2 soap_instantiate__ns1__SendCarRunStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SendCarRunStateResponse * soap_new__ns1__SendCarRunStateResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SendCarRunStateResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SendCarRunStateResponse * soap_new_req__ns1__SendCarRunStateResponse(
	struct soap *soap)
{
	_ns1__SendCarRunStateResponse *_p = soap_new__ns1__SendCarRunStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SendCarRunStateResponse * soap_new_set__ns1__SendCarRunStateResponse(
	struct soap *soap,
	int *SendCarRunStateResult)
{
	_ns1__SendCarRunStateResponse *_p = soap_new__ns1__SendCarRunStateResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SendCarRunStateResponse::SendCarRunStateResult = SendCarRunStateResult;
	}
	return _p;
}

inline int soap_write__ns1__SendCarRunStateResponse(struct soap *soap, _ns1__SendCarRunStateResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendCarRunStateResponse", p->soap_type() == SOAP_TYPE__ns1__SendCarRunStateResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SendCarRunStateResponse * SOAP_FMAC4 soap_get__ns1__SendCarRunStateResponse(struct soap*, _ns1__SendCarRunStateResponse *, const char*, const char*);

inline int soap_read__ns1__SendCarRunStateResponse(struct soap *soap, _ns1__SendCarRunStateResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SendCarRunStateResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SendCarRunState_DEFINED
#define SOAP_TYPE__ns1__SendCarRunState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendCarRunState(struct soap*, const char*, int, const _ns1__SendCarRunState *, const char*);
SOAP_FMAC3 _ns1__SendCarRunState * SOAP_FMAC4 soap_in__ns1__SendCarRunState(struct soap*, const char*, _ns1__SendCarRunState *, const char*);
SOAP_FMAC1 _ns1__SendCarRunState * SOAP_FMAC2 soap_instantiate__ns1__SendCarRunState(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SendCarRunState * soap_new__ns1__SendCarRunState(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SendCarRunState(soap, n, NULL, NULL, NULL);
}

inline _ns1__SendCarRunState * soap_new_req__ns1__SendCarRunState(
	struct soap *soap)
{
	_ns1__SendCarRunState *_p = soap_new__ns1__SendCarRunState(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SendCarRunState * soap_new_set__ns1__SendCarRunState(
	struct soap *soap,
	wchar_t *CarRunState,
	int *FlagCode)
{
	_ns1__SendCarRunState *_p = soap_new__ns1__SendCarRunState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SendCarRunState::CarRunState = CarRunState;
		_p->_ns1__SendCarRunState::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__SendCarRunState(struct soap *soap, _ns1__SendCarRunState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendCarRunState", p->soap_type() == SOAP_TYPE__ns1__SendCarRunState ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SendCarRunState * SOAP_FMAC4 soap_get__ns1__SendCarRunState(struct soap*, _ns1__SendCarRunState *, const char*, const char*);

inline int soap_read__ns1__SendCarRunState(struct soap *soap, _ns1__SendCarRunState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SendCarRunState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__TotalSmartWarnResponse_DEFINED
#define SOAP_TYPE__ns1__TotalSmartWarnResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TotalSmartWarnResponse(struct soap*, const char*, int, const _ns1__TotalSmartWarnResponse *, const char*);
SOAP_FMAC3 _ns1__TotalSmartWarnResponse * SOAP_FMAC4 soap_in__ns1__TotalSmartWarnResponse(struct soap*, const char*, _ns1__TotalSmartWarnResponse *, const char*);
SOAP_FMAC1 _ns1__TotalSmartWarnResponse * SOAP_FMAC2 soap_instantiate__ns1__TotalSmartWarnResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TotalSmartWarnResponse * soap_new__ns1__TotalSmartWarnResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__TotalSmartWarnResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__TotalSmartWarnResponse * soap_new_req__ns1__TotalSmartWarnResponse(
	struct soap *soap)
{
	_ns1__TotalSmartWarnResponse *_p = soap_new__ns1__TotalSmartWarnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__TotalSmartWarnResponse * soap_new_set__ns1__TotalSmartWarnResponse(
	struct soap *soap,
	int *TotalSmartWarnResult,
	wchar_t *TotalSmartWarn)
{
	_ns1__TotalSmartWarnResponse *_p = soap_new__ns1__TotalSmartWarnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__TotalSmartWarnResponse::TotalSmartWarnResult = TotalSmartWarnResult;
		_p->_ns1__TotalSmartWarnResponse::TotalSmartWarn = TotalSmartWarn;
	}
	return _p;
}

inline int soap_write__ns1__TotalSmartWarnResponse(struct soap *soap, _ns1__TotalSmartWarnResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TotalSmartWarnResponse", p->soap_type() == SOAP_TYPE__ns1__TotalSmartWarnResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__TotalSmartWarnResponse * SOAP_FMAC4 soap_get__ns1__TotalSmartWarnResponse(struct soap*, _ns1__TotalSmartWarnResponse *, const char*, const char*);

inline int soap_read__ns1__TotalSmartWarnResponse(struct soap *soap, _ns1__TotalSmartWarnResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__TotalSmartWarnResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__TotalSmartWarn_DEFINED
#define SOAP_TYPE__ns1__TotalSmartWarn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__TotalSmartWarn(struct soap*, const char*, int, const _ns1__TotalSmartWarn *, const char*);
SOAP_FMAC3 _ns1__TotalSmartWarn * SOAP_FMAC4 soap_in__ns1__TotalSmartWarn(struct soap*, const char*, _ns1__TotalSmartWarn *, const char*);
SOAP_FMAC1 _ns1__TotalSmartWarn * SOAP_FMAC2 soap_instantiate__ns1__TotalSmartWarn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__TotalSmartWarn * soap_new__ns1__TotalSmartWarn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__TotalSmartWarn(soap, n, NULL, NULL, NULL);
}

inline _ns1__TotalSmartWarn * soap_new_req__ns1__TotalSmartWarn(
	struct soap *soap)
{
	_ns1__TotalSmartWarn *_p = soap_new__ns1__TotalSmartWarn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__TotalSmartWarn * soap_new_set__ns1__TotalSmartWarn(
	struct soap *soap,
	wchar_t *OptCode,
	int *FlagCode,
	wchar_t *TotalSmartWarn)
{
	_ns1__TotalSmartWarn *_p = soap_new__ns1__TotalSmartWarn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__TotalSmartWarn::OptCode = OptCode;
		_p->_ns1__TotalSmartWarn::FlagCode = FlagCode;
		_p->_ns1__TotalSmartWarn::TotalSmartWarn = TotalSmartWarn;
	}
	return _p;
}

inline int soap_write__ns1__TotalSmartWarn(struct soap *soap, _ns1__TotalSmartWarn const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TotalSmartWarn", p->soap_type() == SOAP_TYPE__ns1__TotalSmartWarn ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__TotalSmartWarn * SOAP_FMAC4 soap_get__ns1__TotalSmartWarn(struct soap*, _ns1__TotalSmartWarn *, const char*, const char*);

inline int soap_read__ns1__TotalSmartWarn(struct soap *soap, _ns1__TotalSmartWarn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__TotalSmartWarn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSmartWarnResponse_DEFINED
#define SOAP_TYPE__ns1__GetSmartWarnResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSmartWarnResponse(struct soap*, const char*, int, const _ns1__GetSmartWarnResponse *, const char*);
SOAP_FMAC3 _ns1__GetSmartWarnResponse * SOAP_FMAC4 soap_in__ns1__GetSmartWarnResponse(struct soap*, const char*, _ns1__GetSmartWarnResponse *, const char*);
SOAP_FMAC1 _ns1__GetSmartWarnResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSmartWarnResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSmartWarnResponse * soap_new__ns1__GetSmartWarnResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSmartWarnResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSmartWarnResponse * soap_new_req__ns1__GetSmartWarnResponse(
	struct soap *soap)
{
	_ns1__GetSmartWarnResponse *_p = soap_new__ns1__GetSmartWarnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSmartWarnResponse * soap_new_set__ns1__GetSmartWarnResponse(
	struct soap *soap,
	int *GetSmartWarnResult,
	wchar_t *SmartWarnList)
{
	_ns1__GetSmartWarnResponse *_p = soap_new__ns1__GetSmartWarnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSmartWarnResponse::GetSmartWarnResult = GetSmartWarnResult;
		_p->_ns1__GetSmartWarnResponse::SmartWarnList = SmartWarnList;
	}
	return _p;
}

inline int soap_write__ns1__GetSmartWarnResponse(struct soap *soap, _ns1__GetSmartWarnResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSmartWarnResponse", p->soap_type() == SOAP_TYPE__ns1__GetSmartWarnResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSmartWarnResponse * SOAP_FMAC4 soap_get__ns1__GetSmartWarnResponse(struct soap*, _ns1__GetSmartWarnResponse *, const char*, const char*);

inline int soap_read__ns1__GetSmartWarnResponse(struct soap *soap, _ns1__GetSmartWarnResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSmartWarnResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetSmartWarn_DEFINED
#define SOAP_TYPE__ns1__GetSmartWarn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSmartWarn(struct soap*, const char*, int, const _ns1__GetSmartWarn *, const char*);
SOAP_FMAC3 _ns1__GetSmartWarn * SOAP_FMAC4 soap_in__ns1__GetSmartWarn(struct soap*, const char*, _ns1__GetSmartWarn *, const char*);
SOAP_FMAC1 _ns1__GetSmartWarn * SOAP_FMAC2 soap_instantiate__ns1__GetSmartWarn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetSmartWarn * soap_new__ns1__GetSmartWarn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetSmartWarn(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetSmartWarn * soap_new_req__ns1__GetSmartWarn(
	struct soap *soap)
{
	_ns1__GetSmartWarn *_p = soap_new__ns1__GetSmartWarn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetSmartWarn * soap_new_set__ns1__GetSmartWarn(
	struct soap *soap,
	wchar_t *OptCode,
	int *FlagCode,
	wchar_t *SmartWarnList)
{
	_ns1__GetSmartWarn *_p = soap_new__ns1__GetSmartWarn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetSmartWarn::OptCode = OptCode;
		_p->_ns1__GetSmartWarn::FlagCode = FlagCode;
		_p->_ns1__GetSmartWarn::SmartWarnList = SmartWarnList;
	}
	return _p;
}

inline int soap_write__ns1__GetSmartWarn(struct soap *soap, _ns1__GetSmartWarn const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetSmartWarn", p->soap_type() == SOAP_TYPE__ns1__GetSmartWarn ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetSmartWarn * SOAP_FMAC4 soap_get__ns1__GetSmartWarn(struct soap*, _ns1__GetSmartWarn *, const char*, const char*);

inline int soap_read__ns1__GetSmartWarn(struct soap *soap, _ns1__GetSmartWarn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetSmartWarn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PostListSmartWarnResponse_DEFINED
#define SOAP_TYPE__ns1__PostListSmartWarnResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PostListSmartWarnResponse(struct soap*, const char*, int, const _ns1__PostListSmartWarnResponse *, const char*);
SOAP_FMAC3 _ns1__PostListSmartWarnResponse * SOAP_FMAC4 soap_in__ns1__PostListSmartWarnResponse(struct soap*, const char*, _ns1__PostListSmartWarnResponse *, const char*);
SOAP_FMAC1 _ns1__PostListSmartWarnResponse * SOAP_FMAC2 soap_instantiate__ns1__PostListSmartWarnResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PostListSmartWarnResponse * soap_new__ns1__PostListSmartWarnResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__PostListSmartWarnResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__PostListSmartWarnResponse * soap_new_req__ns1__PostListSmartWarnResponse(
	struct soap *soap)
{
	_ns1__PostListSmartWarnResponse *_p = soap_new__ns1__PostListSmartWarnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PostListSmartWarnResponse * soap_new_set__ns1__PostListSmartWarnResponse(
	struct soap *soap,
	int *PostListSmartWarnResult,
	int *FlagCode)
{
	_ns1__PostListSmartWarnResponse *_p = soap_new__ns1__PostListSmartWarnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PostListSmartWarnResponse::PostListSmartWarnResult = PostListSmartWarnResult;
		_p->_ns1__PostListSmartWarnResponse::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__PostListSmartWarnResponse(struct soap *soap, _ns1__PostListSmartWarnResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PostListSmartWarnResponse", p->soap_type() == SOAP_TYPE__ns1__PostListSmartWarnResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PostListSmartWarnResponse * SOAP_FMAC4 soap_get__ns1__PostListSmartWarnResponse(struct soap*, _ns1__PostListSmartWarnResponse *, const char*, const char*);

inline int soap_read__ns1__PostListSmartWarnResponse(struct soap *soap, _ns1__PostListSmartWarnResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PostListSmartWarnResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__PostListSmartWarn_DEFINED
#define SOAP_TYPE__ns1__PostListSmartWarn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__PostListSmartWarn(struct soap*, const char*, int, const _ns1__PostListSmartWarn *, const char*);
SOAP_FMAC3 _ns1__PostListSmartWarn * SOAP_FMAC4 soap_in__ns1__PostListSmartWarn(struct soap*, const char*, _ns1__PostListSmartWarn *, const char*);
SOAP_FMAC1 _ns1__PostListSmartWarn * SOAP_FMAC2 soap_instantiate__ns1__PostListSmartWarn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__PostListSmartWarn * soap_new__ns1__PostListSmartWarn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__PostListSmartWarn(soap, n, NULL, NULL, NULL);
}

inline _ns1__PostListSmartWarn * soap_new_req__ns1__PostListSmartWarn(
	struct soap *soap)
{
	_ns1__PostListSmartWarn *_p = soap_new__ns1__PostListSmartWarn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__PostListSmartWarn * soap_new_set__ns1__PostListSmartWarn(
	struct soap *soap,
	wchar_t *SmartWarnSet,
	int *FlagCode)
{
	_ns1__PostListSmartWarn *_p = soap_new__ns1__PostListSmartWarn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__PostListSmartWarn::SmartWarnSet = SmartWarnSet;
		_p->_ns1__PostListSmartWarn::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__PostListSmartWarn(struct soap *soap, _ns1__PostListSmartWarn const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PostListSmartWarn", p->soap_type() == SOAP_TYPE__ns1__PostListSmartWarn ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__PostListSmartWarn * SOAP_FMAC4 soap_get__ns1__PostListSmartWarn(struct soap*, _ns1__PostListSmartWarn *, const char*, const char*);

inline int soap_read__ns1__PostListSmartWarn(struct soap *soap, _ns1__PostListSmartWarn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__PostListSmartWarn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SendSmartWarnResponse_DEFINED
#define SOAP_TYPE__ns1__SendSmartWarnResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendSmartWarnResponse(struct soap*, const char*, int, const _ns1__SendSmartWarnResponse *, const char*);
SOAP_FMAC3 _ns1__SendSmartWarnResponse * SOAP_FMAC4 soap_in__ns1__SendSmartWarnResponse(struct soap*, const char*, _ns1__SendSmartWarnResponse *, const char*);
SOAP_FMAC1 _ns1__SendSmartWarnResponse * SOAP_FMAC2 soap_instantiate__ns1__SendSmartWarnResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SendSmartWarnResponse * soap_new__ns1__SendSmartWarnResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SendSmartWarnResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SendSmartWarnResponse * soap_new_req__ns1__SendSmartWarnResponse(
	struct soap *soap)
{
	_ns1__SendSmartWarnResponse *_p = soap_new__ns1__SendSmartWarnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SendSmartWarnResponse * soap_new_set__ns1__SendSmartWarnResponse(
	struct soap *soap,
	int *SendSmartWarnResult)
{
	_ns1__SendSmartWarnResponse *_p = soap_new__ns1__SendSmartWarnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SendSmartWarnResponse::SendSmartWarnResult = SendSmartWarnResult;
	}
	return _p;
}

inline int soap_write__ns1__SendSmartWarnResponse(struct soap *soap, _ns1__SendSmartWarnResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendSmartWarnResponse", p->soap_type() == SOAP_TYPE__ns1__SendSmartWarnResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SendSmartWarnResponse * SOAP_FMAC4 soap_get__ns1__SendSmartWarnResponse(struct soap*, _ns1__SendSmartWarnResponse *, const char*, const char*);

inline int soap_read__ns1__SendSmartWarnResponse(struct soap *soap, _ns1__SendSmartWarnResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SendSmartWarnResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SendSmartWarn_DEFINED
#define SOAP_TYPE__ns1__SendSmartWarn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SendSmartWarn(struct soap*, const char*, int, const _ns1__SendSmartWarn *, const char*);
SOAP_FMAC3 _ns1__SendSmartWarn * SOAP_FMAC4 soap_in__ns1__SendSmartWarn(struct soap*, const char*, _ns1__SendSmartWarn *, const char*);
SOAP_FMAC1 _ns1__SendSmartWarn * SOAP_FMAC2 soap_instantiate__ns1__SendSmartWarn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SendSmartWarn * soap_new__ns1__SendSmartWarn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SendSmartWarn(soap, n, NULL, NULL, NULL);
}

inline _ns1__SendSmartWarn * soap_new_req__ns1__SendSmartWarn(
	struct soap *soap)
{
	_ns1__SendSmartWarn *_p = soap_new__ns1__SendSmartWarn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SendSmartWarn * soap_new_set__ns1__SendSmartWarn(
	struct soap *soap,
	wchar_t *SmartWarn,
	int *FlagCode)
{
	_ns1__SendSmartWarn *_p = soap_new__ns1__SendSmartWarn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SendSmartWarn::SmartWarn = SmartWarn;
		_p->_ns1__SendSmartWarn::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__SendSmartWarn(struct soap *soap, _ns1__SendSmartWarn const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SendSmartWarn", p->soap_type() == SOAP_TYPE__ns1__SendSmartWarn ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SendSmartWarn * SOAP_FMAC4 soap_get__ns1__SendSmartWarn(struct soap*, _ns1__SendSmartWarn *, const char*, const char*);

inline int soap_read__ns1__SendSmartWarn(struct soap *soap, _ns1__SendSmartWarn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SendSmartWarn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetDeviceResponse_DEFINED
#define SOAP_TYPE__ns1__GetDeviceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetDeviceResponse(struct soap*, const char*, int, const _ns1__GetDeviceResponse *, const char*);
SOAP_FMAC3 _ns1__GetDeviceResponse * SOAP_FMAC4 soap_in__ns1__GetDeviceResponse(struct soap*, const char*, _ns1__GetDeviceResponse *, const char*);
SOAP_FMAC1 _ns1__GetDeviceResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDeviceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetDeviceResponse * soap_new__ns1__GetDeviceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetDeviceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetDeviceResponse * soap_new_req__ns1__GetDeviceResponse(
	struct soap *soap)
{
	_ns1__GetDeviceResponse *_p = soap_new__ns1__GetDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetDeviceResponse * soap_new_set__ns1__GetDeviceResponse(
	struct soap *soap,
	wchar_t *GetDeviceResult)
{
	_ns1__GetDeviceResponse *_p = soap_new__ns1__GetDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetDeviceResponse::GetDeviceResult = GetDeviceResult;
	}
	return _p;
}

inline int soap_write__ns1__GetDeviceResponse(struct soap *soap, _ns1__GetDeviceResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDeviceResponse", p->soap_type() == SOAP_TYPE__ns1__GetDeviceResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetDeviceResponse * SOAP_FMAC4 soap_get__ns1__GetDeviceResponse(struct soap*, _ns1__GetDeviceResponse *, const char*, const char*);

inline int soap_read__ns1__GetDeviceResponse(struct soap *soap, _ns1__GetDeviceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetDeviceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetDevice_DEFINED
#define SOAP_TYPE__ns1__GetDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetDevice(struct soap*, const char*, int, const _ns1__GetDevice *, const char*);
SOAP_FMAC3 _ns1__GetDevice * SOAP_FMAC4 soap_in__ns1__GetDevice(struct soap*, const char*, _ns1__GetDevice *, const char*);
SOAP_FMAC1 _ns1__GetDevice * SOAP_FMAC2 soap_instantiate__ns1__GetDevice(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetDevice * soap_new__ns1__GetDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetDevice(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetDevice * soap_new_req__ns1__GetDevice(
	struct soap *soap)
{
	_ns1__GetDevice *_p = soap_new__ns1__GetDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetDevice * soap_new_set__ns1__GetDevice(
	struct soap *soap,
	wchar_t *OptCode,
	int *FlagCode)
{
	_ns1__GetDevice *_p = soap_new__ns1__GetDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetDevice::OptCode = OptCode;
		_p->_ns1__GetDevice::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__GetDevice(struct soap *soap, _ns1__GetDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDevice", p->soap_type() == SOAP_TYPE__ns1__GetDevice ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetDevice * SOAP_FMAC4 soap_get__ns1__GetDevice(struct soap*, _ns1__GetDevice *, const char*, const char*);

inline int soap_read__ns1__GetDevice(struct soap *soap, _ns1__GetDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BindingDeviceResponse_DEFINED
#define SOAP_TYPE__ns1__BindingDeviceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindingDeviceResponse(struct soap*, const char*, int, const _ns1__BindingDeviceResponse *, const char*);
SOAP_FMAC3 _ns1__BindingDeviceResponse * SOAP_FMAC4 soap_in__ns1__BindingDeviceResponse(struct soap*, const char*, _ns1__BindingDeviceResponse *, const char*);
SOAP_FMAC1 _ns1__BindingDeviceResponse * SOAP_FMAC2 soap_instantiate__ns1__BindingDeviceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindingDeviceResponse * soap_new__ns1__BindingDeviceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindingDeviceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindingDeviceResponse * soap_new_req__ns1__BindingDeviceResponse(
	struct soap *soap)
{
	_ns1__BindingDeviceResponse *_p = soap_new__ns1__BindingDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindingDeviceResponse * soap_new_set__ns1__BindingDeviceResponse(
	struct soap *soap,
	int *BindingDeviceResult)
{
	_ns1__BindingDeviceResponse *_p = soap_new__ns1__BindingDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindingDeviceResponse::BindingDeviceResult = BindingDeviceResult;
	}
	return _p;
}

inline int soap_write__ns1__BindingDeviceResponse(struct soap *soap, _ns1__BindingDeviceResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindingDeviceResponse", p->soap_type() == SOAP_TYPE__ns1__BindingDeviceResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindingDeviceResponse * SOAP_FMAC4 soap_get__ns1__BindingDeviceResponse(struct soap*, _ns1__BindingDeviceResponse *, const char*, const char*);

inline int soap_read__ns1__BindingDeviceResponse(struct soap *soap, _ns1__BindingDeviceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BindingDeviceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__BindingDevice_DEFINED
#define SOAP_TYPE__ns1__BindingDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BindingDevice(struct soap*, const char*, int, const _ns1__BindingDevice *, const char*);
SOAP_FMAC3 _ns1__BindingDevice * SOAP_FMAC4 soap_in__ns1__BindingDevice(struct soap*, const char*, _ns1__BindingDevice *, const char*);
SOAP_FMAC1 _ns1__BindingDevice * SOAP_FMAC2 soap_instantiate__ns1__BindingDevice(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BindingDevice * soap_new__ns1__BindingDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__BindingDevice(soap, n, NULL, NULL, NULL);
}

inline _ns1__BindingDevice * soap_new_req__ns1__BindingDevice(
	struct soap *soap)
{
	_ns1__BindingDevice *_p = soap_new__ns1__BindingDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__BindingDevice * soap_new_set__ns1__BindingDevice(
	struct soap *soap,
	wchar_t *DeviceID,
	wchar_t *AccountID,
	int *FlagCode)
{
	_ns1__BindingDevice *_p = soap_new__ns1__BindingDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__BindingDevice::DeviceID = DeviceID;
		_p->_ns1__BindingDevice::AccountID = AccountID;
		_p->_ns1__BindingDevice::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__BindingDevice(struct soap *soap, _ns1__BindingDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BindingDevice", p->soap_type() == SOAP_TYPE__ns1__BindingDevice ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__BindingDevice * SOAP_FMAC4 soap_get__ns1__BindingDevice(struct soap*, _ns1__BindingDevice *, const char*, const char*);

inline int soap_read__ns1__BindingDevice(struct soap *soap, _ns1__BindingDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__BindingDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SaleDeviceResponse_DEFINED
#define SOAP_TYPE__ns1__SaleDeviceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaleDeviceResponse(struct soap*, const char*, int, const _ns1__SaleDeviceResponse *, const char*);
SOAP_FMAC3 _ns1__SaleDeviceResponse * SOAP_FMAC4 soap_in__ns1__SaleDeviceResponse(struct soap*, const char*, _ns1__SaleDeviceResponse *, const char*);
SOAP_FMAC1 _ns1__SaleDeviceResponse * SOAP_FMAC2 soap_instantiate__ns1__SaleDeviceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SaleDeviceResponse * soap_new__ns1__SaleDeviceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SaleDeviceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SaleDeviceResponse * soap_new_req__ns1__SaleDeviceResponse(
	struct soap *soap)
{
	_ns1__SaleDeviceResponse *_p = soap_new__ns1__SaleDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SaleDeviceResponse * soap_new_set__ns1__SaleDeviceResponse(
	struct soap *soap,
	int *SaleDeviceResult)
{
	_ns1__SaleDeviceResponse *_p = soap_new__ns1__SaleDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SaleDeviceResponse::SaleDeviceResult = SaleDeviceResult;
	}
	return _p;
}

inline int soap_write__ns1__SaleDeviceResponse(struct soap *soap, _ns1__SaleDeviceResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaleDeviceResponse", p->soap_type() == SOAP_TYPE__ns1__SaleDeviceResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SaleDeviceResponse * SOAP_FMAC4 soap_get__ns1__SaleDeviceResponse(struct soap*, _ns1__SaleDeviceResponse *, const char*, const char*);

inline int soap_read__ns1__SaleDeviceResponse(struct soap *soap, _ns1__SaleDeviceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SaleDeviceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SaleDevice_DEFINED
#define SOAP_TYPE__ns1__SaleDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SaleDevice(struct soap*, const char*, int, const _ns1__SaleDevice *, const char*);
SOAP_FMAC3 _ns1__SaleDevice * SOAP_FMAC4 soap_in__ns1__SaleDevice(struct soap*, const char*, _ns1__SaleDevice *, const char*);
SOAP_FMAC1 _ns1__SaleDevice * SOAP_FMAC2 soap_instantiate__ns1__SaleDevice(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SaleDevice * soap_new__ns1__SaleDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SaleDevice(soap, n, NULL, NULL, NULL);
}

inline _ns1__SaleDevice * soap_new_req__ns1__SaleDevice(
	struct soap *soap)
{
	_ns1__SaleDevice *_p = soap_new__ns1__SaleDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SaleDevice * soap_new_set__ns1__SaleDevice(
	struct soap *soap,
	wchar_t *DeviceID,
	wchar_t *AgenFromID,
	int *FlagCode)
{
	_ns1__SaleDevice *_p = soap_new__ns1__SaleDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SaleDevice::DeviceID = DeviceID;
		_p->_ns1__SaleDevice::AgenFromID = AgenFromID;
		_p->_ns1__SaleDevice::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__SaleDevice(struct soap *soap, _ns1__SaleDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SaleDevice", p->soap_type() == SOAP_TYPE__ns1__SaleDevice ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SaleDevice * SOAP_FMAC4 soap_get__ns1__SaleDevice(struct soap*, _ns1__SaleDevice *, const char*, const char*);

inline int soap_read__ns1__SaleDevice(struct soap *soap, _ns1__SaleDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SaleDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MadeDeviceResponse_DEFINED
#define SOAP_TYPE__ns1__MadeDeviceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MadeDeviceResponse(struct soap*, const char*, int, const _ns1__MadeDeviceResponse *, const char*);
SOAP_FMAC3 _ns1__MadeDeviceResponse * SOAP_FMAC4 soap_in__ns1__MadeDeviceResponse(struct soap*, const char*, _ns1__MadeDeviceResponse *, const char*);
SOAP_FMAC1 _ns1__MadeDeviceResponse * SOAP_FMAC2 soap_instantiate__ns1__MadeDeviceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MadeDeviceResponse * soap_new__ns1__MadeDeviceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__MadeDeviceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__MadeDeviceResponse * soap_new_req__ns1__MadeDeviceResponse(
	struct soap *soap)
{
	_ns1__MadeDeviceResponse *_p = soap_new__ns1__MadeDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__MadeDeviceResponse * soap_new_set__ns1__MadeDeviceResponse(
	struct soap *soap,
	int *MadeDeviceResult)
{
	_ns1__MadeDeviceResponse *_p = soap_new__ns1__MadeDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MadeDeviceResponse::MadeDeviceResult = MadeDeviceResult;
	}
	return _p;
}

inline int soap_write__ns1__MadeDeviceResponse(struct soap *soap, _ns1__MadeDeviceResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MadeDeviceResponse", p->soap_type() == SOAP_TYPE__ns1__MadeDeviceResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MadeDeviceResponse * SOAP_FMAC4 soap_get__ns1__MadeDeviceResponse(struct soap*, _ns1__MadeDeviceResponse *, const char*, const char*);

inline int soap_read__ns1__MadeDeviceResponse(struct soap *soap, _ns1__MadeDeviceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MadeDeviceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__MadeDevice_DEFINED
#define SOAP_TYPE__ns1__MadeDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__MadeDevice(struct soap*, const char*, int, const _ns1__MadeDevice *, const char*);
SOAP_FMAC3 _ns1__MadeDevice * SOAP_FMAC4 soap_in__ns1__MadeDevice(struct soap*, const char*, _ns1__MadeDevice *, const char*);
SOAP_FMAC1 _ns1__MadeDevice * SOAP_FMAC2 soap_instantiate__ns1__MadeDevice(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__MadeDevice * soap_new__ns1__MadeDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__MadeDevice(soap, n, NULL, NULL, NULL);
}

inline _ns1__MadeDevice * soap_new_req__ns1__MadeDevice(
	struct soap *soap)
{
	_ns1__MadeDevice *_p = soap_new__ns1__MadeDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__MadeDevice * soap_new_set__ns1__MadeDevice(
	struct soap *soap,
	wchar_t *DeviceID,
	wchar_t *ManangerID,
	int *FlagCode)
{
	_ns1__MadeDevice *_p = soap_new__ns1__MadeDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__MadeDevice::DeviceID = DeviceID;
		_p->_ns1__MadeDevice::ManangerID = ManangerID;
		_p->_ns1__MadeDevice::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__MadeDevice(struct soap *soap, _ns1__MadeDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MadeDevice", p->soap_type() == SOAP_TYPE__ns1__MadeDevice ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__MadeDevice * SOAP_FMAC4 soap_get__ns1__MadeDevice(struct soap*, _ns1__MadeDevice *, const char*, const char*);

inline int soap_read__ns1__MadeDevice(struct soap *soap, _ns1__MadeDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__MadeDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateDeviceResponse_DEFINED
#define SOAP_TYPE__ns1__CreateDeviceResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateDeviceResponse(struct soap*, const char*, int, const _ns1__CreateDeviceResponse *, const char*);
SOAP_FMAC3 _ns1__CreateDeviceResponse * SOAP_FMAC4 soap_in__ns1__CreateDeviceResponse(struct soap*, const char*, _ns1__CreateDeviceResponse *, const char*);
SOAP_FMAC1 _ns1__CreateDeviceResponse * SOAP_FMAC2 soap_instantiate__ns1__CreateDeviceResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateDeviceResponse * soap_new__ns1__CreateDeviceResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CreateDeviceResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateDeviceResponse * soap_new_req__ns1__CreateDeviceResponse(
	struct soap *soap)
{
	_ns1__CreateDeviceResponse *_p = soap_new__ns1__CreateDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CreateDeviceResponse * soap_new_set__ns1__CreateDeviceResponse(
	struct soap *soap,
	int *CreateDeviceResult)
{
	_ns1__CreateDeviceResponse *_p = soap_new__ns1__CreateDeviceResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateDeviceResponse::CreateDeviceResult = CreateDeviceResult;
	}
	return _p;
}

inline int soap_write__ns1__CreateDeviceResponse(struct soap *soap, _ns1__CreateDeviceResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateDeviceResponse", p->soap_type() == SOAP_TYPE__ns1__CreateDeviceResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateDeviceResponse * SOAP_FMAC4 soap_get__ns1__CreateDeviceResponse(struct soap*, _ns1__CreateDeviceResponse *, const char*, const char*);

inline int soap_read__ns1__CreateDeviceResponse(struct soap *soap, _ns1__CreateDeviceResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateDeviceResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CreateDevice_DEFINED
#define SOAP_TYPE__ns1__CreateDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateDevice(struct soap*, const char*, int, const _ns1__CreateDevice *, const char*);
SOAP_FMAC3 _ns1__CreateDevice * SOAP_FMAC4 soap_in__ns1__CreateDevice(struct soap*, const char*, _ns1__CreateDevice *, const char*);
SOAP_FMAC1 _ns1__CreateDevice * SOAP_FMAC2 soap_instantiate__ns1__CreateDevice(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CreateDevice * soap_new__ns1__CreateDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CreateDevice(soap, n, NULL, NULL, NULL);
}

inline _ns1__CreateDevice * soap_new_req__ns1__CreateDevice(
	struct soap *soap)
{
	_ns1__CreateDevice *_p = soap_new__ns1__CreateDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CreateDevice * soap_new_set__ns1__CreateDevice(
	struct soap *soap,
	wchar_t *DeviceUUID,
	wchar_t *ManangerID,
	int *FlagCode)
{
	_ns1__CreateDevice *_p = soap_new__ns1__CreateDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CreateDevice::DeviceUUID = DeviceUUID;
		_p->_ns1__CreateDevice::ManangerID = ManangerID;
		_p->_ns1__CreateDevice::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__CreateDevice(struct soap *soap, _ns1__CreateDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CreateDevice", p->soap_type() == SOAP_TYPE__ns1__CreateDevice ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CreateDevice * SOAP_FMAC4 soap_get__ns1__CreateDevice(struct soap*, _ns1__CreateDevice *, const char*, const char*);

inline int soap_read__ns1__CreateDevice(struct soap *soap, _ns1__CreateDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CreateDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__EditAccountResponse_DEFINED
#define SOAP_TYPE__ns1__EditAccountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EditAccountResponse(struct soap*, const char*, int, const _ns1__EditAccountResponse *, const char*);
SOAP_FMAC3 _ns1__EditAccountResponse * SOAP_FMAC4 soap_in__ns1__EditAccountResponse(struct soap*, const char*, _ns1__EditAccountResponse *, const char*);
SOAP_FMAC1 _ns1__EditAccountResponse * SOAP_FMAC2 soap_instantiate__ns1__EditAccountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EditAccountResponse * soap_new__ns1__EditAccountResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EditAccountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__EditAccountResponse * soap_new_req__ns1__EditAccountResponse(
	struct soap *soap)
{
	_ns1__EditAccountResponse *_p = soap_new__ns1__EditAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EditAccountResponse * soap_new_set__ns1__EditAccountResponse(
	struct soap *soap,
	int *EditAccountResult)
{
	_ns1__EditAccountResponse *_p = soap_new__ns1__EditAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EditAccountResponse::EditAccountResult = EditAccountResult;
	}
	return _p;
}

inline int soap_write__ns1__EditAccountResponse(struct soap *soap, _ns1__EditAccountResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EditAccountResponse", p->soap_type() == SOAP_TYPE__ns1__EditAccountResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EditAccountResponse * SOAP_FMAC4 soap_get__ns1__EditAccountResponse(struct soap*, _ns1__EditAccountResponse *, const char*, const char*);

inline int soap_read__ns1__EditAccountResponse(struct soap *soap, _ns1__EditAccountResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__EditAccountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__EditAccount_DEFINED
#define SOAP_TYPE__ns1__EditAccount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__EditAccount(struct soap*, const char*, int, const _ns1__EditAccount *, const char*);
SOAP_FMAC3 _ns1__EditAccount * SOAP_FMAC4 soap_in__ns1__EditAccount(struct soap*, const char*, _ns1__EditAccount *, const char*);
SOAP_FMAC1 _ns1__EditAccount * SOAP_FMAC2 soap_instantiate__ns1__EditAccount(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__EditAccount * soap_new__ns1__EditAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__EditAccount(soap, n, NULL, NULL, NULL);
}

inline _ns1__EditAccount * soap_new_req__ns1__EditAccount(
	struct soap *soap)
{
	_ns1__EditAccount *_p = soap_new__ns1__EditAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__EditAccount * soap_new_set__ns1__EditAccount(
	struct soap *soap,
	wchar_t *AccountID,
	int *FlagCode,
	wchar_t *OptCode,
	arr__ArrayOfstring *ParaArray)
{
	_ns1__EditAccount *_p = soap_new__ns1__EditAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__EditAccount::AccountID = AccountID;
		_p->_ns1__EditAccount::FlagCode = FlagCode;
		_p->_ns1__EditAccount::OptCode = OptCode;
		_p->_ns1__EditAccount::ParaArray = ParaArray;
	}
	return _p;
}

inline int soap_write__ns1__EditAccount(struct soap *soap, _ns1__EditAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EditAccount", p->soap_type() == SOAP_TYPE__ns1__EditAccount ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__EditAccount * SOAP_FMAC4 soap_get__ns1__EditAccount(struct soap*, _ns1__EditAccount *, const char*, const char*);

inline int soap_read__ns1__EditAccount(struct soap *soap, _ns1__EditAccount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__EditAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetAccountResponse_DEFINED
#define SOAP_TYPE__ns1__SetAccountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAccountResponse(struct soap*, const char*, int, const _ns1__SetAccountResponse *, const char*);
SOAP_FMAC3 _ns1__SetAccountResponse * SOAP_FMAC4 soap_in__ns1__SetAccountResponse(struct soap*, const char*, _ns1__SetAccountResponse *, const char*);
SOAP_FMAC1 _ns1__SetAccountResponse * SOAP_FMAC2 soap_instantiate__ns1__SetAccountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAccountResponse * soap_new__ns1__SetAccountResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetAccountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetAccountResponse * soap_new_req__ns1__SetAccountResponse(
	struct soap *soap)
{
	_ns1__SetAccountResponse *_p = soap_new__ns1__SetAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetAccountResponse * soap_new_set__ns1__SetAccountResponse(
	struct soap *soap,
	int *SetAccountResult)
{
	_ns1__SetAccountResponse *_p = soap_new__ns1__SetAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetAccountResponse::SetAccountResult = SetAccountResult;
	}
	return _p;
}

inline int soap_write__ns1__SetAccountResponse(struct soap *soap, _ns1__SetAccountResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccountResponse", p->soap_type() == SOAP_TYPE__ns1__SetAccountResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetAccountResponse * SOAP_FMAC4 soap_get__ns1__SetAccountResponse(struct soap*, _ns1__SetAccountResponse *, const char*, const char*);

inline int soap_read__ns1__SetAccountResponse(struct soap *soap, _ns1__SetAccountResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetAccountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetAccount_DEFINED
#define SOAP_TYPE__ns1__SetAccount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetAccount(struct soap*, const char*, int, const _ns1__SetAccount *, const char*);
SOAP_FMAC3 _ns1__SetAccount * SOAP_FMAC4 soap_in__ns1__SetAccount(struct soap*, const char*, _ns1__SetAccount *, const char*);
SOAP_FMAC1 _ns1__SetAccount * SOAP_FMAC2 soap_instantiate__ns1__SetAccount(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetAccount * soap_new__ns1__SetAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetAccount(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetAccount * soap_new_req__ns1__SetAccount(
	struct soap *soap)
{
	_ns1__SetAccount *_p = soap_new__ns1__SetAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetAccount * soap_new_set__ns1__SetAccount(
	struct soap *soap,
	ns2__PrimeAccount *MyPrimeAccount,
	int *FlagCode)
{
	_ns1__SetAccount *_p = soap_new__ns1__SetAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetAccount::MyPrimeAccount = MyPrimeAccount;
		_p->_ns1__SetAccount::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__SetAccount(struct soap *soap, _ns1__SetAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetAccount", p->soap_type() == SOAP_TYPE__ns1__SetAccount ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetAccount * SOAP_FMAC4 soap_get__ns1__SetAccount(struct soap*, _ns1__SetAccount *, const char*, const char*);

inline int soap_read__ns1__SetAccount(struct soap *soap, _ns1__SetAccount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SetAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SelectAccountResponse_DEFINED
#define SOAP_TYPE__ns1__SelectAccountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SelectAccountResponse(struct soap*, const char*, int, const _ns1__SelectAccountResponse *, const char*);
SOAP_FMAC3 _ns1__SelectAccountResponse * SOAP_FMAC4 soap_in__ns1__SelectAccountResponse(struct soap*, const char*, _ns1__SelectAccountResponse *, const char*);
SOAP_FMAC1 _ns1__SelectAccountResponse * SOAP_FMAC2 soap_instantiate__ns1__SelectAccountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SelectAccountResponse * soap_new__ns1__SelectAccountResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SelectAccountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SelectAccountResponse * soap_new_req__ns1__SelectAccountResponse(
	struct soap *soap)
{
	_ns1__SelectAccountResponse *_p = soap_new__ns1__SelectAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SelectAccountResponse * soap_new_set__ns1__SelectAccountResponse(
	struct soap *soap,
	wchar_t *SelectAccountResult,
	int *FlagCode)
{
	_ns1__SelectAccountResponse *_p = soap_new__ns1__SelectAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SelectAccountResponse::SelectAccountResult = SelectAccountResult;
		_p->_ns1__SelectAccountResponse::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__SelectAccountResponse(struct soap *soap, _ns1__SelectAccountResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelectAccountResponse", p->soap_type() == SOAP_TYPE__ns1__SelectAccountResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SelectAccountResponse * SOAP_FMAC4 soap_get__ns1__SelectAccountResponse(struct soap*, _ns1__SelectAccountResponse *, const char*, const char*);

inline int soap_read__ns1__SelectAccountResponse(struct soap *soap, _ns1__SelectAccountResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SelectAccountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SelectAccount_DEFINED
#define SOAP_TYPE__ns1__SelectAccount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SelectAccount(struct soap*, const char*, int, const _ns1__SelectAccount *, const char*);
SOAP_FMAC3 _ns1__SelectAccount * SOAP_FMAC4 soap_in__ns1__SelectAccount(struct soap*, const char*, _ns1__SelectAccount *, const char*);
SOAP_FMAC1 _ns1__SelectAccount * SOAP_FMAC2 soap_instantiate__ns1__SelectAccount(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SelectAccount * soap_new__ns1__SelectAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SelectAccount(soap, n, NULL, NULL, NULL);
}

inline _ns1__SelectAccount * soap_new_req__ns1__SelectAccount(
	struct soap *soap)
{
	_ns1__SelectAccount *_p = soap_new__ns1__SelectAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SelectAccount * soap_new_set__ns1__SelectAccount(
	struct soap *soap,
	wchar_t *OptCode,
	int *FlagCode)
{
	_ns1__SelectAccount *_p = soap_new__ns1__SelectAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SelectAccount::OptCode = OptCode;
		_p->_ns1__SelectAccount::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__SelectAccount(struct soap *soap, _ns1__SelectAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SelectAccount", p->soap_type() == SOAP_TYPE__ns1__SelectAccount ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SelectAccount * SOAP_FMAC4 soap_get__ns1__SelectAccount(struct soap*, _ns1__SelectAccount *, const char*, const char*);

inline int soap_read__ns1__SelectAccount(struct soap *soap, _ns1__SelectAccount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SelectAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAccountResponse_DEFINED
#define SOAP_TYPE__ns1__GetAccountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAccountResponse(struct soap*, const char*, int, const _ns1__GetAccountResponse *, const char*);
SOAP_FMAC3 _ns1__GetAccountResponse * SOAP_FMAC4 soap_in__ns1__GetAccountResponse(struct soap*, const char*, _ns1__GetAccountResponse *, const char*);
SOAP_FMAC1 _ns1__GetAccountResponse * SOAP_FMAC2 soap_instantiate__ns1__GetAccountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAccountResponse * soap_new__ns1__GetAccountResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAccountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAccountResponse * soap_new_req__ns1__GetAccountResponse(
	struct soap *soap)
{
	_ns1__GetAccountResponse *_p = soap_new__ns1__GetAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAccountResponse * soap_new_set__ns1__GetAccountResponse(
	struct soap *soap,
	ns2__ArrayOfPrimeAccount *GetAccountResult,
	int *FlagCode)
{
	_ns1__GetAccountResponse *_p = soap_new__ns1__GetAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAccountResponse::GetAccountResult = GetAccountResult;
		_p->_ns1__GetAccountResponse::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__GetAccountResponse(struct soap *soap, _ns1__GetAccountResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccountResponse", p->soap_type() == SOAP_TYPE__ns1__GetAccountResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAccountResponse * SOAP_FMAC4 soap_get__ns1__GetAccountResponse(struct soap*, _ns1__GetAccountResponse *, const char*, const char*);

inline int soap_read__ns1__GetAccountResponse(struct soap *soap, _ns1__GetAccountResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAccountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetAccount_DEFINED
#define SOAP_TYPE__ns1__GetAccount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAccount(struct soap*, const char*, int, const _ns1__GetAccount *, const char*);
SOAP_FMAC3 _ns1__GetAccount * SOAP_FMAC4 soap_in__ns1__GetAccount(struct soap*, const char*, _ns1__GetAccount *, const char*);
SOAP_FMAC1 _ns1__GetAccount * SOAP_FMAC2 soap_instantiate__ns1__GetAccount(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetAccount * soap_new__ns1__GetAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetAccount(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetAccount * soap_new_req__ns1__GetAccount(
	struct soap *soap)
{
	_ns1__GetAccount *_p = soap_new__ns1__GetAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetAccount * soap_new_set__ns1__GetAccount(
	struct soap *soap,
	wchar_t *OptCode,
	int *FlagCode)
{
	_ns1__GetAccount *_p = soap_new__ns1__GetAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetAccount::OptCode = OptCode;
		_p->_ns1__GetAccount::FlagCode = FlagCode;
	}
	return _p;
}

inline int soap_write__ns1__GetAccount(struct soap *soap, _ns1__GetAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetAccount", p->soap_type() == SOAP_TYPE__ns1__GetAccount ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetAccount * SOAP_FMAC4 soap_get__ns1__GetAccount(struct soap*, _ns1__GetAccount *, const char*, const char*);

inline int soap_read__ns1__GetAccount(struct soap *soap, _ns1__GetAccount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__GetAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LoginCloudResponse_DEFINED
#define SOAP_TYPE__ns1__LoginCloudResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginCloudResponse(struct soap*, const char*, int, const _ns1__LoginCloudResponse *, const char*);
SOAP_FMAC3 _ns1__LoginCloudResponse * SOAP_FMAC4 soap_in__ns1__LoginCloudResponse(struct soap*, const char*, _ns1__LoginCloudResponse *, const char*);
SOAP_FMAC1 _ns1__LoginCloudResponse * SOAP_FMAC2 soap_instantiate__ns1__LoginCloudResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LoginCloudResponse * soap_new__ns1__LoginCloudResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LoginCloudResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LoginCloudResponse * soap_new_req__ns1__LoginCloudResponse(
	struct soap *soap)
{
	_ns1__LoginCloudResponse *_p = soap_new__ns1__LoginCloudResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LoginCloudResponse * soap_new_set__ns1__LoginCloudResponse(
	struct soap *soap,
	int *LoginCloudResult,
	wchar_t *AccountID)
{
	_ns1__LoginCloudResponse *_p = soap_new__ns1__LoginCloudResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LoginCloudResponse::LoginCloudResult = LoginCloudResult;
		_p->_ns1__LoginCloudResponse::AccountID = AccountID;
	}
	return _p;
}

inline int soap_write__ns1__LoginCloudResponse(struct soap *soap, _ns1__LoginCloudResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginCloudResponse", p->soap_type() == SOAP_TYPE__ns1__LoginCloudResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LoginCloudResponse * SOAP_FMAC4 soap_get__ns1__LoginCloudResponse(struct soap*, _ns1__LoginCloudResponse *, const char*, const char*);

inline int soap_read__ns1__LoginCloudResponse(struct soap *soap, _ns1__LoginCloudResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LoginCloudResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LoginCloud_DEFINED
#define SOAP_TYPE__ns1__LoginCloud_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginCloud(struct soap*, const char*, int, const _ns1__LoginCloud *, const char*);
SOAP_FMAC3 _ns1__LoginCloud * SOAP_FMAC4 soap_in__ns1__LoginCloud(struct soap*, const char*, _ns1__LoginCloud *, const char*);
SOAP_FMAC1 _ns1__LoginCloud * SOAP_FMAC2 soap_instantiate__ns1__LoginCloud(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LoginCloud * soap_new__ns1__LoginCloud(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LoginCloud(soap, n, NULL, NULL, NULL);
}

inline _ns1__LoginCloud * soap_new_req__ns1__LoginCloud(
	struct soap *soap)
{
	_ns1__LoginCloud *_p = soap_new__ns1__LoginCloud(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LoginCloud * soap_new_set__ns1__LoginCloud(
	struct soap *soap,
	wchar_t *LoginName,
	wchar_t *PassWord,
	wchar_t *AccountID)
{
	_ns1__LoginCloud *_p = soap_new__ns1__LoginCloud(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LoginCloud::LoginName = LoginName;
		_p->_ns1__LoginCloud::PassWord = PassWord;
		_p->_ns1__LoginCloud::AccountID = AccountID;
	}
	return _p;
}

inline int soap_write__ns1__LoginCloud(struct soap *soap, _ns1__LoginCloud const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginCloud", p->soap_type() == SOAP_TYPE__ns1__LoginCloud ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LoginCloud * SOAP_FMAC4 soap_get__ns1__LoginCloud(struct soap*, _ns1__LoginCloud *, const char*, const char*);

inline int soap_read__ns1__LoginCloud(struct soap *soap, _ns1__LoginCloud *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__LoginCloud(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdatePassWordResponse_DEFINED
#define SOAP_TYPE__ns1__UpdatePassWordResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdatePassWordResponse(struct soap*, const char*, int, const _ns1__UpdatePassWordResponse *, const char*);
SOAP_FMAC3 _ns1__UpdatePassWordResponse * SOAP_FMAC4 soap_in__ns1__UpdatePassWordResponse(struct soap*, const char*, _ns1__UpdatePassWordResponse *, const char*);
SOAP_FMAC1 _ns1__UpdatePassWordResponse * SOAP_FMAC2 soap_instantiate__ns1__UpdatePassWordResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdatePassWordResponse * soap_new__ns1__UpdatePassWordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdatePassWordResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdatePassWordResponse * soap_new_req__ns1__UpdatePassWordResponse(
	struct soap *soap)
{
	_ns1__UpdatePassWordResponse *_p = soap_new__ns1__UpdatePassWordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdatePassWordResponse * soap_new_set__ns1__UpdatePassWordResponse(
	struct soap *soap,
	int *UpdatePassWordResult)
{
	_ns1__UpdatePassWordResponse *_p = soap_new__ns1__UpdatePassWordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdatePassWordResponse::UpdatePassWordResult = UpdatePassWordResult;
	}
	return _p;
}

inline int soap_write__ns1__UpdatePassWordResponse(struct soap *soap, _ns1__UpdatePassWordResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdatePassWordResponse", p->soap_type() == SOAP_TYPE__ns1__UpdatePassWordResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdatePassWordResponse * SOAP_FMAC4 soap_get__ns1__UpdatePassWordResponse(struct soap*, _ns1__UpdatePassWordResponse *, const char*, const char*);

inline int soap_read__ns1__UpdatePassWordResponse(struct soap *soap, _ns1__UpdatePassWordResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdatePassWordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UpdatePassWord_DEFINED
#define SOAP_TYPE__ns1__UpdatePassWord_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UpdatePassWord(struct soap*, const char*, int, const _ns1__UpdatePassWord *, const char*);
SOAP_FMAC3 _ns1__UpdatePassWord * SOAP_FMAC4 soap_in__ns1__UpdatePassWord(struct soap*, const char*, _ns1__UpdatePassWord *, const char*);
SOAP_FMAC1 _ns1__UpdatePassWord * SOAP_FMAC2 soap_instantiate__ns1__UpdatePassWord(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UpdatePassWord * soap_new__ns1__UpdatePassWord(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UpdatePassWord(soap, n, NULL, NULL, NULL);
}

inline _ns1__UpdatePassWord * soap_new_req__ns1__UpdatePassWord(
	struct soap *soap)
{
	_ns1__UpdatePassWord *_p = soap_new__ns1__UpdatePassWord(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UpdatePassWord * soap_new_set__ns1__UpdatePassWord(
	struct soap *soap,
	wchar_t *LoginName,
	wchar_t *PassWord,
	wchar_t *AccountID)
{
	_ns1__UpdatePassWord *_p = soap_new__ns1__UpdatePassWord(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UpdatePassWord::LoginName = LoginName;
		_p->_ns1__UpdatePassWord::PassWord = PassWord;
		_p->_ns1__UpdatePassWord::AccountID = AccountID;
	}
	return _p;
}

inline int soap_write__ns1__UpdatePassWord(struct soap *soap, _ns1__UpdatePassWord const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UpdatePassWord", p->soap_type() == SOAP_TYPE__ns1__UpdatePassWord ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UpdatePassWord * SOAP_FMAC4 soap_get__ns1__UpdatePassWord(struct soap*, _ns1__UpdatePassWord *, const char*, const char*);

inline int soap_read__ns1__UpdatePassWord(struct soap *soap, _ns1__UpdatePassWord *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__UpdatePassWord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RegisterAccountResponse_DEFINED
#define SOAP_TYPE__ns1__RegisterAccountResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RegisterAccountResponse(struct soap*, const char*, int, const _ns1__RegisterAccountResponse *, const char*);
SOAP_FMAC3 _ns1__RegisterAccountResponse * SOAP_FMAC4 soap_in__ns1__RegisterAccountResponse(struct soap*, const char*, _ns1__RegisterAccountResponse *, const char*);
SOAP_FMAC1 _ns1__RegisterAccountResponse * SOAP_FMAC2 soap_instantiate__ns1__RegisterAccountResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RegisterAccountResponse * soap_new__ns1__RegisterAccountResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RegisterAccountResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__RegisterAccountResponse * soap_new_req__ns1__RegisterAccountResponse(
	struct soap *soap)
{
	_ns1__RegisterAccountResponse *_p = soap_new__ns1__RegisterAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RegisterAccountResponse * soap_new_set__ns1__RegisterAccountResponse(
	struct soap *soap,
	int *RegisterAccountResult,
	wchar_t *AccountID)
{
	_ns1__RegisterAccountResponse *_p = soap_new__ns1__RegisterAccountResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RegisterAccountResponse::RegisterAccountResult = RegisterAccountResult;
		_p->_ns1__RegisterAccountResponse::AccountID = AccountID;
	}
	return _p;
}

inline int soap_write__ns1__RegisterAccountResponse(struct soap *soap, _ns1__RegisterAccountResponse const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegisterAccountResponse", p->soap_type() == SOAP_TYPE__ns1__RegisterAccountResponse ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RegisterAccountResponse * SOAP_FMAC4 soap_get__ns1__RegisterAccountResponse(struct soap*, _ns1__RegisterAccountResponse *, const char*, const char*);

inline int soap_read__ns1__RegisterAccountResponse(struct soap *soap, _ns1__RegisterAccountResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RegisterAccountResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__RegisterAccount_DEFINED
#define SOAP_TYPE__ns1__RegisterAccount_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RegisterAccount(struct soap*, const char*, int, const _ns1__RegisterAccount *, const char*);
SOAP_FMAC3 _ns1__RegisterAccount * SOAP_FMAC4 soap_in__ns1__RegisterAccount(struct soap*, const char*, _ns1__RegisterAccount *, const char*);
SOAP_FMAC1 _ns1__RegisterAccount * SOAP_FMAC2 soap_instantiate__ns1__RegisterAccount(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__RegisterAccount * soap_new__ns1__RegisterAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__RegisterAccount(soap, n, NULL, NULL, NULL);
}

inline _ns1__RegisterAccount * soap_new_req__ns1__RegisterAccount(
	struct soap *soap)
{
	_ns1__RegisterAccount *_p = soap_new__ns1__RegisterAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__RegisterAccount * soap_new_set__ns1__RegisterAccount(
	struct soap *soap,
	wchar_t *LoginName,
	wchar_t *PassWord,
	wchar_t *AccountID)
{
	_ns1__RegisterAccount *_p = soap_new__ns1__RegisterAccount(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__RegisterAccount::LoginName = LoginName;
		_p->_ns1__RegisterAccount::PassWord = PassWord;
		_p->_ns1__RegisterAccount::AccountID = AccountID;
	}
	return _p;
}

inline int soap_write__ns1__RegisterAccount(struct soap *soap, _ns1__RegisterAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RegisterAccount", p->soap_type() == SOAP_TYPE__ns1__RegisterAccount ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__RegisterAccount * SOAP_FMAC4 soap_get__ns1__RegisterAccount(struct soap*, _ns1__RegisterAccount *, const char*, const char*);

inline int soap_read__ns1__RegisterAccount(struct soap *soap, _ns1__RegisterAccount *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__RegisterAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort_DEFINED
#define SOAP_TYPE_xsd__unsignedShort_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const xsd__unsignedShort *, const char*);
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, xsd__unsignedShort *, const char*);
SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedShort * soap_new_xsd__unsignedShort(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedShort * soap_new_req_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
	}
	return _p;
}

inline xsd__unsignedShort * soap_new_set_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item,
	char *__item__1)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", p->soap_type() == SOAP_TYPE_xsd__unsignedShort ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, xsd__unsignedShort *, const char*, const char*);

inline int soap_read_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong_DEFINED
#define SOAP_TYPE_xsd__unsignedLong_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);
SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
	}
	return _p;
}

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item,
	char *__item__1)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

inline int soap_read_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedLong(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt_DEFINED
#define SOAP_TYPE_xsd__unsignedInt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const xsd__unsignedInt *, const char*);
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, xsd__unsignedInt *, const char*);
SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedInt * soap_new_xsd__unsignedInt(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedInt * soap_new_req_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
	}
	return _p;
}

inline xsd__unsignedInt * soap_new_set_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item,
	char *__item__1)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", p->soap_type() == SOAP_TYPE_xsd__unsignedInt ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, xsd__unsignedInt *, const char*, const char*);

inline int soap_read_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte__DEFINED
#define SOAP_TYPE_xsd__unsignedByte__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap*, const char*, int, const xsd__unsignedByte_ *, const char*);
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap*, const char*, xsd__unsignedByte_ *, const char*);
SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedByte_ * soap_new_xsd__unsignedByte_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedByte_(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedByte_ * soap_new_req_xsd__unsignedByte_(
	struct soap *soap,
	unsigned char __item)
{
	xsd__unsignedByte_ *_p = soap_new_xsd__unsignedByte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedByte_::__item = __item;
	}
	return _p;
}

inline xsd__unsignedByte_ * soap_new_set_xsd__unsignedByte_(
	struct soap *soap,
	unsigned char __item,
	char *__item__1)
{
	xsd__unsignedByte_ *_p = soap_new_xsd__unsignedByte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedByte_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedByte", p->soap_type() == SOAP_TYPE_xsd__unsignedByte_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap*, xsd__unsignedByte_ *, const char*, const char*);

inline int soap_read_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedByte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);
SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

inline xsd__string * soap_new_req_xsd__string(
	struct soap *soap,
	const std::wstring& __item)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
	}
	return _p;
}

inline xsd__string * soap_new_set_xsd__string(
	struct soap *soap,
	const std::wstring& __item,
	char *__item__1)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__string(struct soap *soap, xsd__string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, xsd__string *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__short_DEFINED
#define SOAP_TYPE_xsd__short_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap*, const char*, int, const xsd__short *, const char*);
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap*, const char*, xsd__short *, const char*);
SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap*, int, const char*, const char*, size_t*);

inline xsd__short * soap_new_xsd__short(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__short(soap, n, NULL, NULL, NULL);
}

inline xsd__short * soap_new_req_xsd__short(
	struct soap *soap,
	short __item)
{
	xsd__short *_p = soap_new_xsd__short(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__short::__item = __item;
	}
	return _p;
}

inline xsd__short * soap_new_set_xsd__short(
	struct soap *soap,
	short __item,
	char *__item__1)
{
	xsd__short *_p = soap_new_xsd__short(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__short::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__short(struct soap *soap, xsd__short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:short", p->soap_type() == SOAP_TYPE_xsd__short ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap*, xsd__short *, const char*, const char*);

inline int soap_read_xsd__short(struct soap *soap, xsd__short *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__long_DEFINED
#define SOAP_TYPE_xsd__long_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);
SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL);
}

inline xsd__long * soap_new_req_xsd__long(
	struct soap *soap,
	LONG64 __item)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
	}
	return _p;
}

inline xsd__long * soap_new_set_xsd__long(
	struct soap *soap,
	LONG64 __item,
	char *__item__1)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__long(struct soap *soap, xsd__long const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

inline int soap_read_xsd__long(struct soap *soap, xsd__long *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__int_DEFINED
#define SOAP_TYPE_xsd__int_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);
SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

inline xsd__int * soap_new_req_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline xsd__int * soap_new_set_xsd__int(
	struct soap *soap,
	int __item,
	char *__item__1)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__int(struct soap *soap, xsd__int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, xsd__int *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__float_DEFINED
#define SOAP_TYPE_xsd__float_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);
SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL);
}

inline xsd__float * soap_new_req_xsd__float(
	struct soap *soap,
	float __item)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
	}
	return _p;
}

inline xsd__float * soap_new_set_xsd__float(
	struct soap *soap,
	float __item,
	char *__item__1)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__float(struct soap *soap, xsd__float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", p->soap_type() == SOAP_TYPE_xsd__float ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

inline int soap_read_xsd__float(struct soap *soap, xsd__float *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__duration__DEFINED
#define SOAP_TYPE_xsd__duration__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);
SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL);
}

inline xsd__duration_ * soap_new_req_xsd__duration_(
	struct soap *soap,
	LONG64 __item)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
	}
	return _p;
}

inline xsd__duration_ * soap_new_set_xsd__duration_(
	struct soap *soap,
	LONG64 __item,
	char *__item__1)
{
	xsd__duration_ *_p = soap_new_xsd__duration_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__duration_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__duration_(struct soap *soap, xsd__duration_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:duration", p->soap_type() == SOAP_TYPE_xsd__duration_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

inline int soap_read_xsd__duration_(struct soap *soap, xsd__duration_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__duration_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__double_DEFINED
#define SOAP_TYPE_xsd__double_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);
SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL);
}

inline xsd__double * soap_new_req_xsd__double(
	struct soap *soap,
	double __item)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
	}
	return _p;
}

inline xsd__double * soap_new_set_xsd__double(
	struct soap *soap,
	double __item,
	char *__item__1)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__double(struct soap *soap, xsd__double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", p->soap_type() == SOAP_TYPE_xsd__double ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

inline int soap_read_xsd__double(struct soap *soap, xsd__double *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal__DEFINED
#define SOAP_TYPE_xsd__decimal__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap*, const char*, int, const xsd__decimal_ *, const char*);
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap*, const char*, xsd__decimal_ *, const char*);
SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__decimal_ * soap_new_xsd__decimal_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, NULL);
}

inline xsd__decimal_ * soap_new_req_xsd__decimal_(
	struct soap *soap,
	const std::wstring& __item)
{
	xsd__decimal_ *_p = soap_new_xsd__decimal_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__decimal_::__item = __item;
	}
	return _p;
}

inline xsd__decimal_ * soap_new_set_xsd__decimal_(
	struct soap *soap,
	const std::wstring& __item,
	char *__item__1)
{
	xsd__decimal_ *_p = soap_new_xsd__decimal_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__decimal_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__decimal_(struct soap *soap, xsd__decimal_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:decimal", p->soap_type() == SOAP_TYPE_xsd__decimal_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap*, xsd__decimal_ *, const char*, const char*);

inline int soap_read_xsd__decimal_(struct soap *soap, xsd__decimal_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__decimal_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__decimal(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::wstring *);

#define soap_xsd__decimal2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdwchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::wstring*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__wstring


#define soap_new_xsd__decimal soap_new_std__wstring

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);
SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline xsd__dateTime * soap_new_req_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline xsd__dateTime * soap_new_set_xsd__dateTime(
	struct soap *soap,
	time_t __item,
	char *__item__1)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__dateTime(struct soap *soap, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__byte__DEFINED
#define SOAP_TYPE_xsd__byte__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap*, const char*, int, const xsd__byte_ *, const char*);
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap*, const char*, xsd__byte_ *, const char*);
SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__byte_ * soap_new_xsd__byte_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__byte_(soap, n, NULL, NULL, NULL);
}

inline xsd__byte_ * soap_new_req_xsd__byte_(
	struct soap *soap,
	char __item)
{
	xsd__byte_ *_p = soap_new_xsd__byte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__byte_::__item = __item;
	}
	return _p;
}

inline xsd__byte_ * soap_new_set_xsd__byte_(
	struct soap *soap,
	char __item,
	char *__item__1)
{
	xsd__byte_ *_p = soap_new_xsd__byte_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__byte_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__byte_(struct soap *soap, xsd__byte_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:byte", p->soap_type() == SOAP_TYPE_xsd__byte_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap*, xsd__byte_ *, const char*, const char*);

inline int soap_read_xsd__byte_(struct soap *soap, xsd__byte_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__byte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__boolean_DEFINED
#define SOAP_TYPE_xsd__boolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);
SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);
}

inline xsd__boolean * soap_new_req_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline xsd__boolean * soap_new_set_xsd__boolean(
	struct soap *soap,
	bool __item,
	char *__item__1)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__boolean(struct soap *soap, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary__DEFINED
#define SOAP_TYPE_xsd__base64Binary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);
SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
	}
	return _p;
}

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item,
	char *__item__1)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

inline int soap_read_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI__DEFINED
#define SOAP_TYPE_xsd__anyURI__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);
SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL);
}

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(
	struct soap *soap,
	const std::wstring& __item)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
	}
	return _p;
}

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(
	struct soap *soap,
	const std::wstring& __item,
	char *__item__1)
{
	xsd__anyURI_ *_p = soap_new_xsd__anyURI_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyURI_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__anyURI_(struct soap *soap, xsd__anyURI_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyURI", p->soap_type() == SOAP_TYPE_xsd__anyURI_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

inline int soap_read_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyURI_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyURI_DEFINED
#define SOAP_TYPE_xsd__anyURI_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__anyURI(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::wstring *);

#define soap_xsd__anyURI2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2xsd__anyURI(soap, s, a) soap_s2stdwchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::wstring*, const char*);

#define soap_instantiate_xsd__anyURI soap_instantiate_std__wstring


#define soap_new_xsd__anyURI soap_new_std__wstring

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_xsd__anyURI(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__anyURI(soap, p, "xsd:anyURI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_xsd__anyURI(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__anyURI(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__QName_DEFINED
#define SOAP_TYPE_xsd__QName_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const xsd__QName *, const char*);
SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, xsd__QName *, const char*);
SOAP_FMAC1 xsd__QName * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName * soap_new_xsd__QName(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL);
}

inline xsd__QName * soap_new_req_xsd__QName(
	struct soap *soap)
{
	xsd__QName *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__QName * soap_new_set_xsd__QName(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__QName *_p = soap_new_xsd__QName(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__QName::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__QName(struct soap *soap, xsd__QName const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:QName", p->soap_type() == SOAP_TYPE_xsd__QName ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, xsd__QName *, const char*, const char*);

inline int soap_read_xsd__QName(struct soap *soap, xsd__QName *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__IDREF__DEFINED
#define SOAP_TYPE_xsd__IDREF__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap*, const char*, int, const xsd__IDREF_ *, const char*);
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap*, const char*, xsd__IDREF_ *, const char*);
SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__IDREF_ * soap_new_xsd__IDREF_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__IDREF_(soap, n, NULL, NULL, NULL);
}

inline xsd__IDREF_ * soap_new_req_xsd__IDREF_(
	struct soap *soap,
	const std::wstring& __item)
{
	xsd__IDREF_ *_p = soap_new_xsd__IDREF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__IDREF_::__item = __item;
	}
	return _p;
}

inline xsd__IDREF_ * soap_new_set_xsd__IDREF_(
	struct soap *soap,
	const std::wstring& __item,
	char *__item__1)
{
	xsd__IDREF_ *_p = soap_new_xsd__IDREF_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__IDREF_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__IDREF_(struct soap *soap, xsd__IDREF_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:IDREF", p->soap_type() == SOAP_TYPE_xsd__IDREF_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap*, xsd__IDREF_ *, const char*, const char*);

inline int soap_read_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__IDREF_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__IDREF_DEFINED
#define SOAP_TYPE_xsd__IDREF_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__IDREF(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap*, const std::wstring *);

#define soap_xsd__IDREF2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2xsd__IDREF(soap, s, a) soap_s2stdwchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap*, const char*, std::wstring*, const char*);

#define soap_instantiate_xsd__IDREF soap_instantiate_std__wstring


#define soap_new_xsd__IDREF soap_new_std__wstring

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_xsd__IDREF(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__IDREF(soap, p, "xsd:IDREF", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_xsd__IDREF(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__IDREF(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__ID__DEFINED
#define SOAP_TYPE_xsd__ID__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap*, const char*, int, const xsd__ID_ *, const char*);
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap*, const char*, xsd__ID_ *, const char*);
SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__ID_ * soap_new_xsd__ID_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, NULL);
}

inline xsd__ID_ * soap_new_req_xsd__ID_(
	struct soap *soap,
	const std::wstring& __item)
{
	xsd__ID_ *_p = soap_new_xsd__ID_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__ID_::__item = __item;
	}
	return _p;
}

inline xsd__ID_ * soap_new_set_xsd__ID_(
	struct soap *soap,
	const std::wstring& __item,
	char *__item__1)
{
	xsd__ID_ *_p = soap_new_xsd__ID_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__ID_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__ID_(struct soap *soap, xsd__ID_ const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:ID", p->soap_type() == SOAP_TYPE_xsd__ID_ ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap*, xsd__ID_ *, const char*, const char*);

inline int soap_read_xsd__ID_(struct soap *soap, xsd__ID_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__ID_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__ID_DEFINED
#define SOAP_TYPE_xsd__ID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__ID(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, const std::wstring *);

#define soap_xsd__ID2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2xsd__ID(soap, s, a) soap_s2stdwchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, std::wstring*, const char*);

#define soap_instantiate_xsd__ID soap_instantiate_std__wstring


#define soap_new_xsd__ID soap_new_std__wstring

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_xsd__ID(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__ID(soap, p, "xsd:ID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__ID(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_xsd__ID(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__ID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__wstring_DEFINED
#define SOAP_TYPE_std__wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);

#define soap_std__wstring2s(soap, a) soap_wchar2s((soap), (a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);

#define soap_s2std__wstring(soap, s, a) soap_s2stdwchar((soap), (s), (a), 0, -1, NULL)
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);
SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL);
}

inline std::wstring * soap_new_req_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = soap_new_std__wstring(soap);
	if (_p)
	{	soap_default_std__wstring(soap, _p);
	}
	return _p;
}

inline std::wstring * soap_new_set_std__wstring(
	struct soap *soap)
{
	std::wstring *_p = soap_new_std__wstring(soap);
	if (_p)
	{	soap_default_std__wstring(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

inline int soap_write_std__wstring(struct soap *soap, std::wstring const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

inline int soap_read_std__wstring(struct soap *soap, std::wstring *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__GetCarRunState_DEFINED
#define SOAP_TYPE___ns1__GetCarRunState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCarRunState(struct soap*, struct __ns1__GetCarRunState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCarRunState(struct soap*, const struct __ns1__GetCarRunState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCarRunState(struct soap*, const char*, int, const struct __ns1__GetCarRunState *, const char*);
SOAP_FMAC3 struct __ns1__GetCarRunState * SOAP_FMAC4 soap_in___ns1__GetCarRunState(struct soap*, const char*, struct __ns1__GetCarRunState *, const char*);
SOAP_FMAC1 struct __ns1__GetCarRunState * SOAP_FMAC2 soap_instantiate___ns1__GetCarRunState(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCarRunState * soap_new___ns1__GetCarRunState(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCarRunState(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCarRunState * soap_new_req___ns1__GetCarRunState(
	struct soap *soap)
{
	struct __ns1__GetCarRunState *_p = soap_new___ns1__GetCarRunState(soap);
	if (_p)
	{	soap_default___ns1__GetCarRunState(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCarRunState * soap_new_set___ns1__GetCarRunState(
	struct soap *soap,
	_ns1__GetCarRunState *ns1__GetCarRunState)
{
	struct __ns1__GetCarRunState *_p = soap_new___ns1__GetCarRunState(soap);
	if (_p)
	{	soap_default___ns1__GetCarRunState(soap, _p);
		_p->ns1__GetCarRunState = ns1__GetCarRunState;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCarRunState(struct soap*, const struct __ns1__GetCarRunState *, const char*, const char*);

inline int soap_write___ns1__GetCarRunState(struct soap *soap, struct __ns1__GetCarRunState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__GetCarRunState(soap, p), 0) || soap_put___ns1__GetCarRunState(soap, p, "-ns1:GetCarRunState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCarRunState * SOAP_FMAC4 soap_get___ns1__GetCarRunState(struct soap*, struct __ns1__GetCarRunState *, const char*, const char*);

inline int soap_read___ns1__GetCarRunState(struct soap *soap, struct __ns1__GetCarRunState *p)
{
	if (p)
	{	soap_default___ns1__GetCarRunState(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetCarRunState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__PostListCarRunState_DEFINED
#define SOAP_TYPE___ns1__PostListCarRunState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PostListCarRunState(struct soap*, struct __ns1__PostListCarRunState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PostListCarRunState(struct soap*, const struct __ns1__PostListCarRunState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PostListCarRunState(struct soap*, const char*, int, const struct __ns1__PostListCarRunState *, const char*);
SOAP_FMAC3 struct __ns1__PostListCarRunState * SOAP_FMAC4 soap_in___ns1__PostListCarRunState(struct soap*, const char*, struct __ns1__PostListCarRunState *, const char*);
SOAP_FMAC1 struct __ns1__PostListCarRunState * SOAP_FMAC2 soap_instantiate___ns1__PostListCarRunState(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PostListCarRunState * soap_new___ns1__PostListCarRunState(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__PostListCarRunState(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__PostListCarRunState * soap_new_req___ns1__PostListCarRunState(
	struct soap *soap)
{
	struct __ns1__PostListCarRunState *_p = soap_new___ns1__PostListCarRunState(soap);
	if (_p)
	{	soap_default___ns1__PostListCarRunState(soap, _p);
	}
	return _p;
}

inline struct __ns1__PostListCarRunState * soap_new_set___ns1__PostListCarRunState(
	struct soap *soap,
	_ns1__PostListCarRunState *ns1__PostListCarRunState)
{
	struct __ns1__PostListCarRunState *_p = soap_new___ns1__PostListCarRunState(soap);
	if (_p)
	{	soap_default___ns1__PostListCarRunState(soap, _p);
		_p->ns1__PostListCarRunState = ns1__PostListCarRunState;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PostListCarRunState(struct soap*, const struct __ns1__PostListCarRunState *, const char*, const char*);

inline int soap_write___ns1__PostListCarRunState(struct soap *soap, struct __ns1__PostListCarRunState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__PostListCarRunState(soap, p), 0) || soap_put___ns1__PostListCarRunState(soap, p, "-ns1:PostListCarRunState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__PostListCarRunState * SOAP_FMAC4 soap_get___ns1__PostListCarRunState(struct soap*, struct __ns1__PostListCarRunState *, const char*, const char*);

inline int soap_read___ns1__PostListCarRunState(struct soap *soap, struct __ns1__PostListCarRunState *p)
{
	if (p)
	{	soap_default___ns1__PostListCarRunState(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__PostListCarRunState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SendCarRunState_DEFINED
#define SOAP_TYPE___ns1__SendCarRunState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SendCarRunState(struct soap*, struct __ns1__SendCarRunState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SendCarRunState(struct soap*, const struct __ns1__SendCarRunState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SendCarRunState(struct soap*, const char*, int, const struct __ns1__SendCarRunState *, const char*);
SOAP_FMAC3 struct __ns1__SendCarRunState * SOAP_FMAC4 soap_in___ns1__SendCarRunState(struct soap*, const char*, struct __ns1__SendCarRunState *, const char*);
SOAP_FMAC1 struct __ns1__SendCarRunState * SOAP_FMAC2 soap_instantiate___ns1__SendCarRunState(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SendCarRunState * soap_new___ns1__SendCarRunState(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SendCarRunState(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SendCarRunState * soap_new_req___ns1__SendCarRunState(
	struct soap *soap)
{
	struct __ns1__SendCarRunState *_p = soap_new___ns1__SendCarRunState(soap);
	if (_p)
	{	soap_default___ns1__SendCarRunState(soap, _p);
	}
	return _p;
}

inline struct __ns1__SendCarRunState * soap_new_set___ns1__SendCarRunState(
	struct soap *soap,
	_ns1__SendCarRunState *ns1__SendCarRunState)
{
	struct __ns1__SendCarRunState *_p = soap_new___ns1__SendCarRunState(soap);
	if (_p)
	{	soap_default___ns1__SendCarRunState(soap, _p);
		_p->ns1__SendCarRunState = ns1__SendCarRunState;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SendCarRunState(struct soap*, const struct __ns1__SendCarRunState *, const char*, const char*);

inline int soap_write___ns1__SendCarRunState(struct soap *soap, struct __ns1__SendCarRunState const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__SendCarRunState(soap, p), 0) || soap_put___ns1__SendCarRunState(soap, p, "-ns1:SendCarRunState", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SendCarRunState * SOAP_FMAC4 soap_get___ns1__SendCarRunState(struct soap*, struct __ns1__SendCarRunState *, const char*, const char*);

inline int soap_read___ns1__SendCarRunState(struct soap *soap, struct __ns1__SendCarRunState *p)
{
	if (p)
	{	soap_default___ns1__SendCarRunState(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SendCarRunState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__TotalSmartWarn_DEFINED
#define SOAP_TYPE___ns1__TotalSmartWarn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TotalSmartWarn(struct soap*, struct __ns1__TotalSmartWarn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TotalSmartWarn(struct soap*, const struct __ns1__TotalSmartWarn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TotalSmartWarn(struct soap*, const char*, int, const struct __ns1__TotalSmartWarn *, const char*);
SOAP_FMAC3 struct __ns1__TotalSmartWarn * SOAP_FMAC4 soap_in___ns1__TotalSmartWarn(struct soap*, const char*, struct __ns1__TotalSmartWarn *, const char*);
SOAP_FMAC1 struct __ns1__TotalSmartWarn * SOAP_FMAC2 soap_instantiate___ns1__TotalSmartWarn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__TotalSmartWarn * soap_new___ns1__TotalSmartWarn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__TotalSmartWarn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__TotalSmartWarn * soap_new_req___ns1__TotalSmartWarn(
	struct soap *soap)
{
	struct __ns1__TotalSmartWarn *_p = soap_new___ns1__TotalSmartWarn(soap);
	if (_p)
	{	soap_default___ns1__TotalSmartWarn(soap, _p);
	}
	return _p;
}

inline struct __ns1__TotalSmartWarn * soap_new_set___ns1__TotalSmartWarn(
	struct soap *soap,
	_ns1__TotalSmartWarn *ns1__TotalSmartWarn)
{
	struct __ns1__TotalSmartWarn *_p = soap_new___ns1__TotalSmartWarn(soap);
	if (_p)
	{	soap_default___ns1__TotalSmartWarn(soap, _p);
		_p->ns1__TotalSmartWarn = ns1__TotalSmartWarn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TotalSmartWarn(struct soap*, const struct __ns1__TotalSmartWarn *, const char*, const char*);

inline int soap_write___ns1__TotalSmartWarn(struct soap *soap, struct __ns1__TotalSmartWarn const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__TotalSmartWarn(soap, p), 0) || soap_put___ns1__TotalSmartWarn(soap, p, "-ns1:TotalSmartWarn", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__TotalSmartWarn * SOAP_FMAC4 soap_get___ns1__TotalSmartWarn(struct soap*, struct __ns1__TotalSmartWarn *, const char*, const char*);

inline int soap_read___ns1__TotalSmartWarn(struct soap *soap, struct __ns1__TotalSmartWarn *p)
{
	if (p)
	{	soap_default___ns1__TotalSmartWarn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__TotalSmartWarn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetSmartWarn_DEFINED
#define SOAP_TYPE___ns1__GetSmartWarn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetSmartWarn(struct soap*, struct __ns1__GetSmartWarn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetSmartWarn(struct soap*, const struct __ns1__GetSmartWarn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetSmartWarn(struct soap*, const char*, int, const struct __ns1__GetSmartWarn *, const char*);
SOAP_FMAC3 struct __ns1__GetSmartWarn * SOAP_FMAC4 soap_in___ns1__GetSmartWarn(struct soap*, const char*, struct __ns1__GetSmartWarn *, const char*);
SOAP_FMAC1 struct __ns1__GetSmartWarn * SOAP_FMAC2 soap_instantiate___ns1__GetSmartWarn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetSmartWarn * soap_new___ns1__GetSmartWarn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetSmartWarn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetSmartWarn * soap_new_req___ns1__GetSmartWarn(
	struct soap *soap)
{
	struct __ns1__GetSmartWarn *_p = soap_new___ns1__GetSmartWarn(soap);
	if (_p)
	{	soap_default___ns1__GetSmartWarn(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetSmartWarn * soap_new_set___ns1__GetSmartWarn(
	struct soap *soap,
	_ns1__GetSmartWarn *ns1__GetSmartWarn)
{
	struct __ns1__GetSmartWarn *_p = soap_new___ns1__GetSmartWarn(soap);
	if (_p)
	{	soap_default___ns1__GetSmartWarn(soap, _p);
		_p->ns1__GetSmartWarn = ns1__GetSmartWarn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetSmartWarn(struct soap*, const struct __ns1__GetSmartWarn *, const char*, const char*);

inline int soap_write___ns1__GetSmartWarn(struct soap *soap, struct __ns1__GetSmartWarn const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__GetSmartWarn(soap, p), 0) || soap_put___ns1__GetSmartWarn(soap, p, "-ns1:GetSmartWarn", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetSmartWarn * SOAP_FMAC4 soap_get___ns1__GetSmartWarn(struct soap*, struct __ns1__GetSmartWarn *, const char*, const char*);

inline int soap_read___ns1__GetSmartWarn(struct soap *soap, struct __ns1__GetSmartWarn *p)
{
	if (p)
	{	soap_default___ns1__GetSmartWarn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetSmartWarn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__PostListSmartWarn_DEFINED
#define SOAP_TYPE___ns1__PostListSmartWarn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__PostListSmartWarn(struct soap*, struct __ns1__PostListSmartWarn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__PostListSmartWarn(struct soap*, const struct __ns1__PostListSmartWarn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__PostListSmartWarn(struct soap*, const char*, int, const struct __ns1__PostListSmartWarn *, const char*);
SOAP_FMAC3 struct __ns1__PostListSmartWarn * SOAP_FMAC4 soap_in___ns1__PostListSmartWarn(struct soap*, const char*, struct __ns1__PostListSmartWarn *, const char*);
SOAP_FMAC1 struct __ns1__PostListSmartWarn * SOAP_FMAC2 soap_instantiate___ns1__PostListSmartWarn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__PostListSmartWarn * soap_new___ns1__PostListSmartWarn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__PostListSmartWarn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__PostListSmartWarn * soap_new_req___ns1__PostListSmartWarn(
	struct soap *soap)
{
	struct __ns1__PostListSmartWarn *_p = soap_new___ns1__PostListSmartWarn(soap);
	if (_p)
	{	soap_default___ns1__PostListSmartWarn(soap, _p);
	}
	return _p;
}

inline struct __ns1__PostListSmartWarn * soap_new_set___ns1__PostListSmartWarn(
	struct soap *soap,
	_ns1__PostListSmartWarn *ns1__PostListSmartWarn)
{
	struct __ns1__PostListSmartWarn *_p = soap_new___ns1__PostListSmartWarn(soap);
	if (_p)
	{	soap_default___ns1__PostListSmartWarn(soap, _p);
		_p->ns1__PostListSmartWarn = ns1__PostListSmartWarn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__PostListSmartWarn(struct soap*, const struct __ns1__PostListSmartWarn *, const char*, const char*);

inline int soap_write___ns1__PostListSmartWarn(struct soap *soap, struct __ns1__PostListSmartWarn const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__PostListSmartWarn(soap, p), 0) || soap_put___ns1__PostListSmartWarn(soap, p, "-ns1:PostListSmartWarn", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__PostListSmartWarn * SOAP_FMAC4 soap_get___ns1__PostListSmartWarn(struct soap*, struct __ns1__PostListSmartWarn *, const char*, const char*);

inline int soap_read___ns1__PostListSmartWarn(struct soap *soap, struct __ns1__PostListSmartWarn *p)
{
	if (p)
	{	soap_default___ns1__PostListSmartWarn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__PostListSmartWarn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SendSmartWarn_DEFINED
#define SOAP_TYPE___ns1__SendSmartWarn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SendSmartWarn(struct soap*, struct __ns1__SendSmartWarn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SendSmartWarn(struct soap*, const struct __ns1__SendSmartWarn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SendSmartWarn(struct soap*, const char*, int, const struct __ns1__SendSmartWarn *, const char*);
SOAP_FMAC3 struct __ns1__SendSmartWarn * SOAP_FMAC4 soap_in___ns1__SendSmartWarn(struct soap*, const char*, struct __ns1__SendSmartWarn *, const char*);
SOAP_FMAC1 struct __ns1__SendSmartWarn * SOAP_FMAC2 soap_instantiate___ns1__SendSmartWarn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SendSmartWarn * soap_new___ns1__SendSmartWarn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SendSmartWarn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SendSmartWarn * soap_new_req___ns1__SendSmartWarn(
	struct soap *soap)
{
	struct __ns1__SendSmartWarn *_p = soap_new___ns1__SendSmartWarn(soap);
	if (_p)
	{	soap_default___ns1__SendSmartWarn(soap, _p);
	}
	return _p;
}

inline struct __ns1__SendSmartWarn * soap_new_set___ns1__SendSmartWarn(
	struct soap *soap,
	_ns1__SendSmartWarn *ns1__SendSmartWarn)
{
	struct __ns1__SendSmartWarn *_p = soap_new___ns1__SendSmartWarn(soap);
	if (_p)
	{	soap_default___ns1__SendSmartWarn(soap, _p);
		_p->ns1__SendSmartWarn = ns1__SendSmartWarn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SendSmartWarn(struct soap*, const struct __ns1__SendSmartWarn *, const char*, const char*);

inline int soap_write___ns1__SendSmartWarn(struct soap *soap, struct __ns1__SendSmartWarn const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__SendSmartWarn(soap, p), 0) || soap_put___ns1__SendSmartWarn(soap, p, "-ns1:SendSmartWarn", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SendSmartWarn * SOAP_FMAC4 soap_get___ns1__SendSmartWarn(struct soap*, struct __ns1__SendSmartWarn *, const char*, const char*);

inline int soap_read___ns1__SendSmartWarn(struct soap *soap, struct __ns1__SendSmartWarn *p)
{
	if (p)
	{	soap_default___ns1__SendSmartWarn(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SendSmartWarn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetDevice_DEFINED
#define SOAP_TYPE___ns1__GetDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetDevice(struct soap*, struct __ns1__GetDevice *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetDevice(struct soap*, const struct __ns1__GetDevice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetDevice(struct soap*, const char*, int, const struct __ns1__GetDevice *, const char*);
SOAP_FMAC3 struct __ns1__GetDevice * SOAP_FMAC4 soap_in___ns1__GetDevice(struct soap*, const char*, struct __ns1__GetDevice *, const char*);
SOAP_FMAC1 struct __ns1__GetDevice * SOAP_FMAC2 soap_instantiate___ns1__GetDevice(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetDevice * soap_new___ns1__GetDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetDevice(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetDevice * soap_new_req___ns1__GetDevice(
	struct soap *soap)
{
	struct __ns1__GetDevice *_p = soap_new___ns1__GetDevice(soap);
	if (_p)
	{	soap_default___ns1__GetDevice(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetDevice * soap_new_set___ns1__GetDevice(
	struct soap *soap,
	_ns1__GetDevice *ns1__GetDevice)
{
	struct __ns1__GetDevice *_p = soap_new___ns1__GetDevice(soap);
	if (_p)
	{	soap_default___ns1__GetDevice(soap, _p);
		_p->ns1__GetDevice = ns1__GetDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetDevice(struct soap*, const struct __ns1__GetDevice *, const char*, const char*);

inline int soap_write___ns1__GetDevice(struct soap *soap, struct __ns1__GetDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__GetDevice(soap, p), 0) || soap_put___ns1__GetDevice(soap, p, "-ns1:GetDevice", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetDevice * SOAP_FMAC4 soap_get___ns1__GetDevice(struct soap*, struct __ns1__GetDevice *, const char*, const char*);

inline int soap_read___ns1__GetDevice(struct soap *soap, struct __ns1__GetDevice *p)
{
	if (p)
	{	soap_default___ns1__GetDevice(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__BindingDevice_DEFINED
#define SOAP_TYPE___ns1__BindingDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BindingDevice(struct soap*, struct __ns1__BindingDevice *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BindingDevice(struct soap*, const struct __ns1__BindingDevice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BindingDevice(struct soap*, const char*, int, const struct __ns1__BindingDevice *, const char*);
SOAP_FMAC3 struct __ns1__BindingDevice * SOAP_FMAC4 soap_in___ns1__BindingDevice(struct soap*, const char*, struct __ns1__BindingDevice *, const char*);
SOAP_FMAC1 struct __ns1__BindingDevice * SOAP_FMAC2 soap_instantiate___ns1__BindingDevice(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BindingDevice * soap_new___ns1__BindingDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__BindingDevice(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__BindingDevice * soap_new_req___ns1__BindingDevice(
	struct soap *soap)
{
	struct __ns1__BindingDevice *_p = soap_new___ns1__BindingDevice(soap);
	if (_p)
	{	soap_default___ns1__BindingDevice(soap, _p);
	}
	return _p;
}

inline struct __ns1__BindingDevice * soap_new_set___ns1__BindingDevice(
	struct soap *soap,
	_ns1__BindingDevice *ns1__BindingDevice)
{
	struct __ns1__BindingDevice *_p = soap_new___ns1__BindingDevice(soap);
	if (_p)
	{	soap_default___ns1__BindingDevice(soap, _p);
		_p->ns1__BindingDevice = ns1__BindingDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BindingDevice(struct soap*, const struct __ns1__BindingDevice *, const char*, const char*);

inline int soap_write___ns1__BindingDevice(struct soap *soap, struct __ns1__BindingDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__BindingDevice(soap, p), 0) || soap_put___ns1__BindingDevice(soap, p, "-ns1:BindingDevice", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__BindingDevice * SOAP_FMAC4 soap_get___ns1__BindingDevice(struct soap*, struct __ns1__BindingDevice *, const char*, const char*);

inline int soap_read___ns1__BindingDevice(struct soap *soap, struct __ns1__BindingDevice *p)
{
	if (p)
	{	soap_default___ns1__BindingDevice(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__BindingDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SaleDevice_DEFINED
#define SOAP_TYPE___ns1__SaleDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SaleDevice(struct soap*, struct __ns1__SaleDevice *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SaleDevice(struct soap*, const struct __ns1__SaleDevice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SaleDevice(struct soap*, const char*, int, const struct __ns1__SaleDevice *, const char*);
SOAP_FMAC3 struct __ns1__SaleDevice * SOAP_FMAC4 soap_in___ns1__SaleDevice(struct soap*, const char*, struct __ns1__SaleDevice *, const char*);
SOAP_FMAC1 struct __ns1__SaleDevice * SOAP_FMAC2 soap_instantiate___ns1__SaleDevice(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SaleDevice * soap_new___ns1__SaleDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SaleDevice(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SaleDevice * soap_new_req___ns1__SaleDevice(
	struct soap *soap)
{
	struct __ns1__SaleDevice *_p = soap_new___ns1__SaleDevice(soap);
	if (_p)
	{	soap_default___ns1__SaleDevice(soap, _p);
	}
	return _p;
}

inline struct __ns1__SaleDevice * soap_new_set___ns1__SaleDevice(
	struct soap *soap,
	_ns1__SaleDevice *ns1__SaleDevice)
{
	struct __ns1__SaleDevice *_p = soap_new___ns1__SaleDevice(soap);
	if (_p)
	{	soap_default___ns1__SaleDevice(soap, _p);
		_p->ns1__SaleDevice = ns1__SaleDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SaleDevice(struct soap*, const struct __ns1__SaleDevice *, const char*, const char*);

inline int soap_write___ns1__SaleDevice(struct soap *soap, struct __ns1__SaleDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__SaleDevice(soap, p), 0) || soap_put___ns1__SaleDevice(soap, p, "-ns1:SaleDevice", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SaleDevice * SOAP_FMAC4 soap_get___ns1__SaleDevice(struct soap*, struct __ns1__SaleDevice *, const char*, const char*);

inline int soap_read___ns1__SaleDevice(struct soap *soap, struct __ns1__SaleDevice *p)
{
	if (p)
	{	soap_default___ns1__SaleDevice(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SaleDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__MadeDevice_DEFINED
#define SOAP_TYPE___ns1__MadeDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__MadeDevice(struct soap*, struct __ns1__MadeDevice *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__MadeDevice(struct soap*, const struct __ns1__MadeDevice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__MadeDevice(struct soap*, const char*, int, const struct __ns1__MadeDevice *, const char*);
SOAP_FMAC3 struct __ns1__MadeDevice * SOAP_FMAC4 soap_in___ns1__MadeDevice(struct soap*, const char*, struct __ns1__MadeDevice *, const char*);
SOAP_FMAC1 struct __ns1__MadeDevice * SOAP_FMAC2 soap_instantiate___ns1__MadeDevice(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__MadeDevice * soap_new___ns1__MadeDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__MadeDevice(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__MadeDevice * soap_new_req___ns1__MadeDevice(
	struct soap *soap)
{
	struct __ns1__MadeDevice *_p = soap_new___ns1__MadeDevice(soap);
	if (_p)
	{	soap_default___ns1__MadeDevice(soap, _p);
	}
	return _p;
}

inline struct __ns1__MadeDevice * soap_new_set___ns1__MadeDevice(
	struct soap *soap,
	_ns1__MadeDevice *ns1__MadeDevice)
{
	struct __ns1__MadeDevice *_p = soap_new___ns1__MadeDevice(soap);
	if (_p)
	{	soap_default___ns1__MadeDevice(soap, _p);
		_p->ns1__MadeDevice = ns1__MadeDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__MadeDevice(struct soap*, const struct __ns1__MadeDevice *, const char*, const char*);

inline int soap_write___ns1__MadeDevice(struct soap *soap, struct __ns1__MadeDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__MadeDevice(soap, p), 0) || soap_put___ns1__MadeDevice(soap, p, "-ns1:MadeDevice", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__MadeDevice * SOAP_FMAC4 soap_get___ns1__MadeDevice(struct soap*, struct __ns1__MadeDevice *, const char*, const char*);

inline int soap_read___ns1__MadeDevice(struct soap *soap, struct __ns1__MadeDevice *p)
{
	if (p)
	{	soap_default___ns1__MadeDevice(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__MadeDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CreateDevice_DEFINED
#define SOAP_TYPE___ns1__CreateDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CreateDevice(struct soap*, struct __ns1__CreateDevice *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CreateDevice(struct soap*, const struct __ns1__CreateDevice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CreateDevice(struct soap*, const char*, int, const struct __ns1__CreateDevice *, const char*);
SOAP_FMAC3 struct __ns1__CreateDevice * SOAP_FMAC4 soap_in___ns1__CreateDevice(struct soap*, const char*, struct __ns1__CreateDevice *, const char*);
SOAP_FMAC1 struct __ns1__CreateDevice * SOAP_FMAC2 soap_instantiate___ns1__CreateDevice(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CreateDevice * soap_new___ns1__CreateDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CreateDevice(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CreateDevice * soap_new_req___ns1__CreateDevice(
	struct soap *soap)
{
	struct __ns1__CreateDevice *_p = soap_new___ns1__CreateDevice(soap);
	if (_p)
	{	soap_default___ns1__CreateDevice(soap, _p);
	}
	return _p;
}

inline struct __ns1__CreateDevice * soap_new_set___ns1__CreateDevice(
	struct soap *soap,
	_ns1__CreateDevice *ns1__CreateDevice)
{
	struct __ns1__CreateDevice *_p = soap_new___ns1__CreateDevice(soap);
	if (_p)
	{	soap_default___ns1__CreateDevice(soap, _p);
		_p->ns1__CreateDevice = ns1__CreateDevice;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CreateDevice(struct soap*, const struct __ns1__CreateDevice *, const char*, const char*);

inline int soap_write___ns1__CreateDevice(struct soap *soap, struct __ns1__CreateDevice const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__CreateDevice(soap, p), 0) || soap_put___ns1__CreateDevice(soap, p, "-ns1:CreateDevice", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CreateDevice * SOAP_FMAC4 soap_get___ns1__CreateDevice(struct soap*, struct __ns1__CreateDevice *, const char*, const char*);

inline int soap_read___ns1__CreateDevice(struct soap *soap, struct __ns1__CreateDevice *p)
{
	if (p)
	{	soap_default___ns1__CreateDevice(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CreateDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__EditAccount_DEFINED
#define SOAP_TYPE___ns1__EditAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__EditAccount(struct soap*, struct __ns1__EditAccount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__EditAccount(struct soap*, const struct __ns1__EditAccount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__EditAccount(struct soap*, const char*, int, const struct __ns1__EditAccount *, const char*);
SOAP_FMAC3 struct __ns1__EditAccount * SOAP_FMAC4 soap_in___ns1__EditAccount(struct soap*, const char*, struct __ns1__EditAccount *, const char*);
SOAP_FMAC1 struct __ns1__EditAccount * SOAP_FMAC2 soap_instantiate___ns1__EditAccount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__EditAccount * soap_new___ns1__EditAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__EditAccount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__EditAccount * soap_new_req___ns1__EditAccount(
	struct soap *soap)
{
	struct __ns1__EditAccount *_p = soap_new___ns1__EditAccount(soap);
	if (_p)
	{	soap_default___ns1__EditAccount(soap, _p);
	}
	return _p;
}

inline struct __ns1__EditAccount * soap_new_set___ns1__EditAccount(
	struct soap *soap,
	_ns1__EditAccount *ns1__EditAccount)
{
	struct __ns1__EditAccount *_p = soap_new___ns1__EditAccount(soap);
	if (_p)
	{	soap_default___ns1__EditAccount(soap, _p);
		_p->ns1__EditAccount = ns1__EditAccount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__EditAccount(struct soap*, const struct __ns1__EditAccount *, const char*, const char*);

inline int soap_write___ns1__EditAccount(struct soap *soap, struct __ns1__EditAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__EditAccount(soap, p), 0) || soap_put___ns1__EditAccount(soap, p, "-ns1:EditAccount", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__EditAccount * SOAP_FMAC4 soap_get___ns1__EditAccount(struct soap*, struct __ns1__EditAccount *, const char*, const char*);

inline int soap_read___ns1__EditAccount(struct soap *soap, struct __ns1__EditAccount *p)
{
	if (p)
	{	soap_default___ns1__EditAccount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__EditAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetAccount_DEFINED
#define SOAP_TYPE___ns1__SetAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetAccount(struct soap*, struct __ns1__SetAccount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetAccount(struct soap*, const struct __ns1__SetAccount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetAccount(struct soap*, const char*, int, const struct __ns1__SetAccount *, const char*);
SOAP_FMAC3 struct __ns1__SetAccount * SOAP_FMAC4 soap_in___ns1__SetAccount(struct soap*, const char*, struct __ns1__SetAccount *, const char*);
SOAP_FMAC1 struct __ns1__SetAccount * SOAP_FMAC2 soap_instantiate___ns1__SetAccount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetAccount * soap_new___ns1__SetAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetAccount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetAccount * soap_new_req___ns1__SetAccount(
	struct soap *soap)
{
	struct __ns1__SetAccount *_p = soap_new___ns1__SetAccount(soap);
	if (_p)
	{	soap_default___ns1__SetAccount(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetAccount * soap_new_set___ns1__SetAccount(
	struct soap *soap,
	_ns1__SetAccount *ns1__SetAccount)
{
	struct __ns1__SetAccount *_p = soap_new___ns1__SetAccount(soap);
	if (_p)
	{	soap_default___ns1__SetAccount(soap, _p);
		_p->ns1__SetAccount = ns1__SetAccount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetAccount(struct soap*, const struct __ns1__SetAccount *, const char*, const char*);

inline int soap_write___ns1__SetAccount(struct soap *soap, struct __ns1__SetAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__SetAccount(soap, p), 0) || soap_put___ns1__SetAccount(soap, p, "-ns1:SetAccount", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetAccount * SOAP_FMAC4 soap_get___ns1__SetAccount(struct soap*, struct __ns1__SetAccount *, const char*, const char*);

inline int soap_read___ns1__SetAccount(struct soap *soap, struct __ns1__SetAccount *p)
{
	if (p)
	{	soap_default___ns1__SetAccount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SetAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SelectAccount_DEFINED
#define SOAP_TYPE___ns1__SelectAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SelectAccount(struct soap*, struct __ns1__SelectAccount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SelectAccount(struct soap*, const struct __ns1__SelectAccount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SelectAccount(struct soap*, const char*, int, const struct __ns1__SelectAccount *, const char*);
SOAP_FMAC3 struct __ns1__SelectAccount * SOAP_FMAC4 soap_in___ns1__SelectAccount(struct soap*, const char*, struct __ns1__SelectAccount *, const char*);
SOAP_FMAC1 struct __ns1__SelectAccount * SOAP_FMAC2 soap_instantiate___ns1__SelectAccount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SelectAccount * soap_new___ns1__SelectAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SelectAccount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SelectAccount * soap_new_req___ns1__SelectAccount(
	struct soap *soap)
{
	struct __ns1__SelectAccount *_p = soap_new___ns1__SelectAccount(soap);
	if (_p)
	{	soap_default___ns1__SelectAccount(soap, _p);
	}
	return _p;
}

inline struct __ns1__SelectAccount * soap_new_set___ns1__SelectAccount(
	struct soap *soap,
	_ns1__SelectAccount *ns1__SelectAccount)
{
	struct __ns1__SelectAccount *_p = soap_new___ns1__SelectAccount(soap);
	if (_p)
	{	soap_default___ns1__SelectAccount(soap, _p);
		_p->ns1__SelectAccount = ns1__SelectAccount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SelectAccount(struct soap*, const struct __ns1__SelectAccount *, const char*, const char*);

inline int soap_write___ns1__SelectAccount(struct soap *soap, struct __ns1__SelectAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__SelectAccount(soap, p), 0) || soap_put___ns1__SelectAccount(soap, p, "-ns1:SelectAccount", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SelectAccount * SOAP_FMAC4 soap_get___ns1__SelectAccount(struct soap*, struct __ns1__SelectAccount *, const char*, const char*);

inline int soap_read___ns1__SelectAccount(struct soap *soap, struct __ns1__SelectAccount *p)
{
	if (p)
	{	soap_default___ns1__SelectAccount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SelectAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetAccount_DEFINED
#define SOAP_TYPE___ns1__GetAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAccount(struct soap*, struct __ns1__GetAccount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAccount(struct soap*, const struct __ns1__GetAccount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAccount(struct soap*, const char*, int, const struct __ns1__GetAccount *, const char*);
SOAP_FMAC3 struct __ns1__GetAccount * SOAP_FMAC4 soap_in___ns1__GetAccount(struct soap*, const char*, struct __ns1__GetAccount *, const char*);
SOAP_FMAC1 struct __ns1__GetAccount * SOAP_FMAC2 soap_instantiate___ns1__GetAccount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetAccount * soap_new___ns1__GetAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetAccount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetAccount * soap_new_req___ns1__GetAccount(
	struct soap *soap)
{
	struct __ns1__GetAccount *_p = soap_new___ns1__GetAccount(soap);
	if (_p)
	{	soap_default___ns1__GetAccount(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetAccount * soap_new_set___ns1__GetAccount(
	struct soap *soap,
	_ns1__GetAccount *ns1__GetAccount)
{
	struct __ns1__GetAccount *_p = soap_new___ns1__GetAccount(soap);
	if (_p)
	{	soap_default___ns1__GetAccount(soap, _p);
		_p->ns1__GetAccount = ns1__GetAccount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAccount(struct soap*, const struct __ns1__GetAccount *, const char*, const char*);

inline int soap_write___ns1__GetAccount(struct soap *soap, struct __ns1__GetAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__GetAccount(soap, p), 0) || soap_put___ns1__GetAccount(soap, p, "-ns1:GetAccount", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetAccount * SOAP_FMAC4 soap_get___ns1__GetAccount(struct soap*, struct __ns1__GetAccount *, const char*, const char*);

inline int soap_read___ns1__GetAccount(struct soap *soap, struct __ns1__GetAccount *p)
{
	if (p)
	{	soap_default___ns1__GetAccount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__GetAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__LoginCloud_DEFINED
#define SOAP_TYPE___ns1__LoginCloud_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__LoginCloud(struct soap*, struct __ns1__LoginCloud *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__LoginCloud(struct soap*, const struct __ns1__LoginCloud *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__LoginCloud(struct soap*, const char*, int, const struct __ns1__LoginCloud *, const char*);
SOAP_FMAC3 struct __ns1__LoginCloud * SOAP_FMAC4 soap_in___ns1__LoginCloud(struct soap*, const char*, struct __ns1__LoginCloud *, const char*);
SOAP_FMAC1 struct __ns1__LoginCloud * SOAP_FMAC2 soap_instantiate___ns1__LoginCloud(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__LoginCloud * soap_new___ns1__LoginCloud(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__LoginCloud(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__LoginCloud * soap_new_req___ns1__LoginCloud(
	struct soap *soap)
{
	struct __ns1__LoginCloud *_p = soap_new___ns1__LoginCloud(soap);
	if (_p)
	{	soap_default___ns1__LoginCloud(soap, _p);
	}
	return _p;
}

inline struct __ns1__LoginCloud * soap_new_set___ns1__LoginCloud(
	struct soap *soap,
	_ns1__LoginCloud *ns1__LoginCloud)
{
	struct __ns1__LoginCloud *_p = soap_new___ns1__LoginCloud(soap);
	if (_p)
	{	soap_default___ns1__LoginCloud(soap, _p);
		_p->ns1__LoginCloud = ns1__LoginCloud;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__LoginCloud(struct soap*, const struct __ns1__LoginCloud *, const char*, const char*);

inline int soap_write___ns1__LoginCloud(struct soap *soap, struct __ns1__LoginCloud const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__LoginCloud(soap, p), 0) || soap_put___ns1__LoginCloud(soap, p, "-ns1:LoginCloud", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__LoginCloud * SOAP_FMAC4 soap_get___ns1__LoginCloud(struct soap*, struct __ns1__LoginCloud *, const char*, const char*);

inline int soap_read___ns1__LoginCloud(struct soap *soap, struct __ns1__LoginCloud *p)
{
	if (p)
	{	soap_default___ns1__LoginCloud(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__LoginCloud(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UpdatePassWord_DEFINED
#define SOAP_TYPE___ns1__UpdatePassWord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UpdatePassWord(struct soap*, struct __ns1__UpdatePassWord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UpdatePassWord(struct soap*, const struct __ns1__UpdatePassWord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UpdatePassWord(struct soap*, const char*, int, const struct __ns1__UpdatePassWord *, const char*);
SOAP_FMAC3 struct __ns1__UpdatePassWord * SOAP_FMAC4 soap_in___ns1__UpdatePassWord(struct soap*, const char*, struct __ns1__UpdatePassWord *, const char*);
SOAP_FMAC1 struct __ns1__UpdatePassWord * SOAP_FMAC2 soap_instantiate___ns1__UpdatePassWord(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UpdatePassWord * soap_new___ns1__UpdatePassWord(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UpdatePassWord(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UpdatePassWord * soap_new_req___ns1__UpdatePassWord(
	struct soap *soap)
{
	struct __ns1__UpdatePassWord *_p = soap_new___ns1__UpdatePassWord(soap);
	if (_p)
	{	soap_default___ns1__UpdatePassWord(soap, _p);
	}
	return _p;
}

inline struct __ns1__UpdatePassWord * soap_new_set___ns1__UpdatePassWord(
	struct soap *soap,
	_ns1__UpdatePassWord *ns1__UpdatePassWord)
{
	struct __ns1__UpdatePassWord *_p = soap_new___ns1__UpdatePassWord(soap);
	if (_p)
	{	soap_default___ns1__UpdatePassWord(soap, _p);
		_p->ns1__UpdatePassWord = ns1__UpdatePassWord;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UpdatePassWord(struct soap*, const struct __ns1__UpdatePassWord *, const char*, const char*);

inline int soap_write___ns1__UpdatePassWord(struct soap *soap, struct __ns1__UpdatePassWord const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__UpdatePassWord(soap, p), 0) || soap_put___ns1__UpdatePassWord(soap, p, "-ns1:UpdatePassWord", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UpdatePassWord * SOAP_FMAC4 soap_get___ns1__UpdatePassWord(struct soap*, struct __ns1__UpdatePassWord *, const char*, const char*);

inline int soap_read___ns1__UpdatePassWord(struct soap *soap, struct __ns1__UpdatePassWord *p)
{
	if (p)
	{	soap_default___ns1__UpdatePassWord(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__UpdatePassWord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__RegisterAccount_DEFINED
#define SOAP_TYPE___ns1__RegisterAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RegisterAccount(struct soap*, struct __ns1__RegisterAccount *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RegisterAccount(struct soap*, const struct __ns1__RegisterAccount *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RegisterAccount(struct soap*, const char*, int, const struct __ns1__RegisterAccount *, const char*);
SOAP_FMAC3 struct __ns1__RegisterAccount * SOAP_FMAC4 soap_in___ns1__RegisterAccount(struct soap*, const char*, struct __ns1__RegisterAccount *, const char*);
SOAP_FMAC1 struct __ns1__RegisterAccount * SOAP_FMAC2 soap_instantiate___ns1__RegisterAccount(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RegisterAccount * soap_new___ns1__RegisterAccount(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__RegisterAccount(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__RegisterAccount * soap_new_req___ns1__RegisterAccount(
	struct soap *soap)
{
	struct __ns1__RegisterAccount *_p = soap_new___ns1__RegisterAccount(soap);
	if (_p)
	{	soap_default___ns1__RegisterAccount(soap, _p);
	}
	return _p;
}

inline struct __ns1__RegisterAccount * soap_new_set___ns1__RegisterAccount(
	struct soap *soap,
	_ns1__RegisterAccount *ns1__RegisterAccount)
{
	struct __ns1__RegisterAccount *_p = soap_new___ns1__RegisterAccount(soap);
	if (_p)
	{	soap_default___ns1__RegisterAccount(soap, _p);
		_p->ns1__RegisterAccount = ns1__RegisterAccount;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RegisterAccount(struct soap*, const struct __ns1__RegisterAccount *, const char*, const char*);

inline int soap_write___ns1__RegisterAccount(struct soap *soap, struct __ns1__RegisterAccount const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__RegisterAccount(soap, p), 0) || soap_put___ns1__RegisterAccount(soap, p, "-ns1:RegisterAccount", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__RegisterAccount * SOAP_FMAC4 soap_get___ns1__RegisterAccount(struct soap*, struct __ns1__RegisterAccount *, const char*, const char*);

inline int soap_read___ns1__RegisterAccount(struct soap *soap, struct __ns1__RegisterAccount *p)
{
	if (p)
	{	soap_default___ns1__RegisterAccount(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__RegisterAccount(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCarRunState_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCarRunState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCarRunState(struct soap*, _ns1__GetCarRunState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCarRunState(struct soap*, const char *, int, _ns1__GetCarRunState *const*, const char *);
SOAP_FMAC3 _ns1__GetCarRunState ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCarRunState(struct soap*, const char*, _ns1__GetCarRunState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCarRunState(struct soap*, _ns1__GetCarRunState *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCarRunState ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCarRunState(struct soap*, _ns1__GetCarRunState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__PostListCarRunState_DEFINED
#define SOAP_TYPE_PointerTo_ns1__PostListCarRunState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PostListCarRunState(struct soap*, _ns1__PostListCarRunState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PostListCarRunState(struct soap*, const char *, int, _ns1__PostListCarRunState *const*, const char *);
SOAP_FMAC3 _ns1__PostListCarRunState ** SOAP_FMAC4 soap_in_PointerTo_ns1__PostListCarRunState(struct soap*, const char*, _ns1__PostListCarRunState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PostListCarRunState(struct soap*, _ns1__PostListCarRunState *const*, const char*, const char*);
SOAP_FMAC3 _ns1__PostListCarRunState ** SOAP_FMAC4 soap_get_PointerTo_ns1__PostListCarRunState(struct soap*, _ns1__PostListCarRunState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SendCarRunState_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SendCarRunState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendCarRunState(struct soap*, _ns1__SendCarRunState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendCarRunState(struct soap*, const char *, int, _ns1__SendCarRunState *const*, const char *);
SOAP_FMAC3 _ns1__SendCarRunState ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendCarRunState(struct soap*, const char*, _ns1__SendCarRunState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendCarRunState(struct soap*, _ns1__SendCarRunState *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SendCarRunState ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendCarRunState(struct soap*, _ns1__SendCarRunState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__TotalSmartWarn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__TotalSmartWarn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__TotalSmartWarn(struct soap*, _ns1__TotalSmartWarn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__TotalSmartWarn(struct soap*, const char *, int, _ns1__TotalSmartWarn *const*, const char *);
SOAP_FMAC3 _ns1__TotalSmartWarn ** SOAP_FMAC4 soap_in_PointerTo_ns1__TotalSmartWarn(struct soap*, const char*, _ns1__TotalSmartWarn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__TotalSmartWarn(struct soap*, _ns1__TotalSmartWarn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__TotalSmartWarn ** SOAP_FMAC4 soap_get_PointerTo_ns1__TotalSmartWarn(struct soap*, _ns1__TotalSmartWarn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetSmartWarn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetSmartWarn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSmartWarn(struct soap*, _ns1__GetSmartWarn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSmartWarn(struct soap*, const char *, int, _ns1__GetSmartWarn *const*, const char *);
SOAP_FMAC3 _ns1__GetSmartWarn ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSmartWarn(struct soap*, const char*, _ns1__GetSmartWarn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSmartWarn(struct soap*, _ns1__GetSmartWarn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetSmartWarn ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSmartWarn(struct soap*, _ns1__GetSmartWarn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__PostListSmartWarn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__PostListSmartWarn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__PostListSmartWarn(struct soap*, _ns1__PostListSmartWarn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__PostListSmartWarn(struct soap*, const char *, int, _ns1__PostListSmartWarn *const*, const char *);
SOAP_FMAC3 _ns1__PostListSmartWarn ** SOAP_FMAC4 soap_in_PointerTo_ns1__PostListSmartWarn(struct soap*, const char*, _ns1__PostListSmartWarn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__PostListSmartWarn(struct soap*, _ns1__PostListSmartWarn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__PostListSmartWarn ** SOAP_FMAC4 soap_get_PointerTo_ns1__PostListSmartWarn(struct soap*, _ns1__PostListSmartWarn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SendSmartWarn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SendSmartWarn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SendSmartWarn(struct soap*, _ns1__SendSmartWarn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SendSmartWarn(struct soap*, const char *, int, _ns1__SendSmartWarn *const*, const char *);
SOAP_FMAC3 _ns1__SendSmartWarn ** SOAP_FMAC4 soap_in_PointerTo_ns1__SendSmartWarn(struct soap*, const char*, _ns1__SendSmartWarn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SendSmartWarn(struct soap*, _ns1__SendSmartWarn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SendSmartWarn ** SOAP_FMAC4 soap_get_PointerTo_ns1__SendSmartWarn(struct soap*, _ns1__SendSmartWarn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetDevice_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetDevice(struct soap*, _ns1__GetDevice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetDevice(struct soap*, const char *, int, _ns1__GetDevice *const*, const char *);
SOAP_FMAC3 _ns1__GetDevice ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetDevice(struct soap*, const char*, _ns1__GetDevice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetDevice(struct soap*, _ns1__GetDevice *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetDevice ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetDevice(struct soap*, _ns1__GetDevice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__BindingDevice_DEFINED
#define SOAP_TYPE_PointerTo_ns1__BindingDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BindingDevice(struct soap*, _ns1__BindingDevice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BindingDevice(struct soap*, const char *, int, _ns1__BindingDevice *const*, const char *);
SOAP_FMAC3 _ns1__BindingDevice ** SOAP_FMAC4 soap_in_PointerTo_ns1__BindingDevice(struct soap*, const char*, _ns1__BindingDevice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BindingDevice(struct soap*, _ns1__BindingDevice *const*, const char*, const char*);
SOAP_FMAC3 _ns1__BindingDevice ** SOAP_FMAC4 soap_get_PointerTo_ns1__BindingDevice(struct soap*, _ns1__BindingDevice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SaleDevice_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SaleDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SaleDevice(struct soap*, _ns1__SaleDevice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SaleDevice(struct soap*, const char *, int, _ns1__SaleDevice *const*, const char *);
SOAP_FMAC3 _ns1__SaleDevice ** SOAP_FMAC4 soap_in_PointerTo_ns1__SaleDevice(struct soap*, const char*, _ns1__SaleDevice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SaleDevice(struct soap*, _ns1__SaleDevice *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SaleDevice ** SOAP_FMAC4 soap_get_PointerTo_ns1__SaleDevice(struct soap*, _ns1__SaleDevice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__MadeDevice_DEFINED
#define SOAP_TYPE_PointerTo_ns1__MadeDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__MadeDevice(struct soap*, _ns1__MadeDevice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__MadeDevice(struct soap*, const char *, int, _ns1__MadeDevice *const*, const char *);
SOAP_FMAC3 _ns1__MadeDevice ** SOAP_FMAC4 soap_in_PointerTo_ns1__MadeDevice(struct soap*, const char*, _ns1__MadeDevice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__MadeDevice(struct soap*, _ns1__MadeDevice *const*, const char*, const char*);
SOAP_FMAC3 _ns1__MadeDevice ** SOAP_FMAC4 soap_get_PointerTo_ns1__MadeDevice(struct soap*, _ns1__MadeDevice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CreateDevice_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CreateDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateDevice(struct soap*, _ns1__CreateDevice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateDevice(struct soap*, const char *, int, _ns1__CreateDevice *const*, const char *);
SOAP_FMAC3 _ns1__CreateDevice ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateDevice(struct soap*, const char*, _ns1__CreateDevice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateDevice(struct soap*, _ns1__CreateDevice *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CreateDevice ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateDevice(struct soap*, _ns1__CreateDevice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__EditAccount_DEFINED
#define SOAP_TYPE_PointerTo_ns1__EditAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__EditAccount(struct soap*, _ns1__EditAccount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__EditAccount(struct soap*, const char *, int, _ns1__EditAccount *const*, const char *);
SOAP_FMAC3 _ns1__EditAccount ** SOAP_FMAC4 soap_in_PointerTo_ns1__EditAccount(struct soap*, const char*, _ns1__EditAccount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__EditAccount(struct soap*, _ns1__EditAccount *const*, const char*, const char*);
SOAP_FMAC3 _ns1__EditAccount ** SOAP_FMAC4 soap_get_PointerTo_ns1__EditAccount(struct soap*, _ns1__EditAccount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetAccount_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetAccount(struct soap*, _ns1__SetAccount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetAccount(struct soap*, const char *, int, _ns1__SetAccount *const*, const char *);
SOAP_FMAC3 _ns1__SetAccount ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetAccount(struct soap*, const char*, _ns1__SetAccount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetAccount(struct soap*, _ns1__SetAccount *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetAccount ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetAccount(struct soap*, _ns1__SetAccount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SelectAccount_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SelectAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SelectAccount(struct soap*, _ns1__SelectAccount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SelectAccount(struct soap*, const char *, int, _ns1__SelectAccount *const*, const char *);
SOAP_FMAC3 _ns1__SelectAccount ** SOAP_FMAC4 soap_in_PointerTo_ns1__SelectAccount(struct soap*, const char*, _ns1__SelectAccount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SelectAccount(struct soap*, _ns1__SelectAccount *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SelectAccount ** SOAP_FMAC4 soap_get_PointerTo_ns1__SelectAccount(struct soap*, _ns1__SelectAccount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetAccount_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAccount(struct soap*, _ns1__GetAccount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAccount(struct soap*, const char *, int, _ns1__GetAccount *const*, const char *);
SOAP_FMAC3 _ns1__GetAccount ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAccount(struct soap*, const char*, _ns1__GetAccount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAccount(struct soap*, _ns1__GetAccount *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetAccount ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAccount(struct soap*, _ns1__GetAccount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__LoginCloud_DEFINED
#define SOAP_TYPE_PointerTo_ns1__LoginCloud_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LoginCloud(struct soap*, _ns1__LoginCloud *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LoginCloud(struct soap*, const char *, int, _ns1__LoginCloud *const*, const char *);
SOAP_FMAC3 _ns1__LoginCloud ** SOAP_FMAC4 soap_in_PointerTo_ns1__LoginCloud(struct soap*, const char*, _ns1__LoginCloud **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LoginCloud(struct soap*, _ns1__LoginCloud *const*, const char*, const char*);
SOAP_FMAC3 _ns1__LoginCloud ** SOAP_FMAC4 soap_get_PointerTo_ns1__LoginCloud(struct soap*, _ns1__LoginCloud **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UpdatePassWord_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UpdatePassWord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UpdatePassWord(struct soap*, _ns1__UpdatePassWord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UpdatePassWord(struct soap*, const char *, int, _ns1__UpdatePassWord *const*, const char *);
SOAP_FMAC3 _ns1__UpdatePassWord ** SOAP_FMAC4 soap_in_PointerTo_ns1__UpdatePassWord(struct soap*, const char*, _ns1__UpdatePassWord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UpdatePassWord(struct soap*, _ns1__UpdatePassWord *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UpdatePassWord ** SOAP_FMAC4 soap_get_PointerTo_ns1__UpdatePassWord(struct soap*, _ns1__UpdatePassWord **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__RegisterAccount_DEFINED
#define SOAP_TYPE_PointerTo_ns1__RegisterAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RegisterAccount(struct soap*, _ns1__RegisterAccount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RegisterAccount(struct soap*, const char *, int, _ns1__RegisterAccount *const*, const char *);
SOAP_FMAC3 _ns1__RegisterAccount ** SOAP_FMAC4 soap_in_PointerTo_ns1__RegisterAccount(struct soap*, const char*, _ns1__RegisterAccount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RegisterAccount(struct soap*, _ns1__RegisterAccount *const*, const char*, const char*);
SOAP_FMAC3 _ns1__RegisterAccount ** SOAP_FMAC4 soap_get_PointerTo_ns1__RegisterAccount(struct soap*, _ns1__RegisterAccount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__wstring_DEFINED
#define SOAP_TYPE_PointerTostd__wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons2__PrimeAccount_DEFINED
#define SOAP_TYPE_PointerToPointerTons2__PrimeAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons2__PrimeAccount(struct soap*, ns2__PrimeAccount **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons2__PrimeAccount(struct soap*, const char *, int, ns2__PrimeAccount **const*, const char *);
SOAP_FMAC3 ns2__PrimeAccount *** SOAP_FMAC4 soap_in_PointerToPointerTons2__PrimeAccount(struct soap*, const char*, ns2__PrimeAccount ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons2__PrimeAccount(struct soap*, ns2__PrimeAccount **const*, const char*, const char*);
SOAP_FMAC3 ns2__PrimeAccount *** SOAP_FMAC4 soap_get_PointerToPointerTons2__PrimeAccount(struct soap*, ns2__PrimeAccount ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToarr__ArrayOfstring_DEFINED
#define SOAP_TYPE_PointerToarr__ArrayOfstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfstring(struct soap*, const char *, int, arr__ArrayOfstring *const*, const char *);
SOAP_FMAC3 arr__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfstring(struct soap*, const char*, arr__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring *const*, const char*, const char*);
SOAP_FMAC3 arr__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__PrimeAccount_DEFINED
#define SOAP_TYPE_PointerTons2__PrimeAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__PrimeAccount(struct soap*, ns2__PrimeAccount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__PrimeAccount(struct soap*, const char *, int, ns2__PrimeAccount *const*, const char *);
SOAP_FMAC3 ns2__PrimeAccount ** SOAP_FMAC4 soap_in_PointerTons2__PrimeAccount(struct soap*, const char*, ns2__PrimeAccount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__PrimeAccount(struct soap*, ns2__PrimeAccount *const*, const char*, const char*);
SOAP_FMAC3 ns2__PrimeAccount ** SOAP_FMAC4 soap_get_PointerTons2__PrimeAccount(struct soap*, ns2__PrimeAccount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ArrayOfPrimeAccount_DEFINED
#define SOAP_TYPE_PointerTons2__ArrayOfPrimeAccount_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ArrayOfPrimeAccount(struct soap*, ns2__ArrayOfPrimeAccount *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ArrayOfPrimeAccount(struct soap*, const char *, int, ns2__ArrayOfPrimeAccount *const*, const char *);
SOAP_FMAC3 ns2__ArrayOfPrimeAccount ** SOAP_FMAC4 soap_in_PointerTons2__ArrayOfPrimeAccount(struct soap*, const char*, ns2__ArrayOfPrimeAccount **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ArrayOfPrimeAccount(struct soap*, ns2__ArrayOfPrimeAccount *const*, const char*, const char*);
SOAP_FMAC3 ns2__ArrayOfPrimeAccount ** SOAP_FMAC4 soap_get_PointerTons2__ArrayOfPrimeAccount(struct soap*, ns2__ArrayOfPrimeAccount **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wstring_DEFINED
#define SOAP_TYPE_wstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);

#define soap_wstring2s(soap, a) soap_wchar2s((soap), (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);

#define soap_s2wstring(soap, s, a) soap_s2wchar((soap), (s), (wchar_t**)(a), 0, -1, NULL)
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

inline int soap_write_wstring(struct soap *soap, wchar_t *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_wstring(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

inline int soap_read_wstring(struct soap *soap, wchar_t **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_wstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
